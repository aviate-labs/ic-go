// Package root provides a client for the "root" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package root

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/principal"
)

// Agent is a client for the "root" canister.
type Agent struct {
	*agent.Agent
	CanisterId principal.Principal
}

// NewAgent creates a new agent for the "root" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &Agent{
		Agent:      a,
		CanisterId: canisterId,
	}, nil
}

// CanisterStatus calls the "canister_status" method on the "root" canister.
func (a Agent) CanisterStatus(arg0 CanisterIdRecord) (*CanisterStatusResult, error) {
	var r0 CanisterStatusResult
	if err := a.Agent.Call(
		a.CanisterId,
		"canister_status",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ChangeCanister calls the "change_canister" method on the "root" canister.
func (a Agent) ChangeCanister(arg0 ChangeCanisterRequest) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"change_canister",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// GetBuildMetadata calls the "get_build_metadata" method on the "root" canister.
func (a Agent) GetBuildMetadata() (*string, error) {
	var r0 string
	if err := a.Agent.Query(
		a.CanisterId,
		"get_build_metadata",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetSnsCanistersSummary calls the "get_sns_canisters_summary" method on the "root" canister.
func (a Agent) GetSnsCanistersSummary(arg0 GetSnsCanistersSummaryRequest) (*GetSnsCanistersSummaryResponse, error) {
	var r0 GetSnsCanistersSummaryResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"get_sns_canisters_summary",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetTimers calls the "get_timers" method on the "root" canister.
func (a Agent) GetTimers(arg0 struct {
}) (*GetTimersResponse, error) {
	var r0 GetTimersResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_timers",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListSnsCanisters calls the "list_sns_canisters" method on the "root" canister.
func (a Agent) ListSnsCanisters(arg0 struct {
}) (*ListSnsCanistersResponse, error) {
	var r0 ListSnsCanistersResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_sns_canisters",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ManageDappCanisterSettings calls the "manage_dapp_canister_settings" method on the "root" canister.
func (a Agent) ManageDappCanisterSettings(arg0 ManageDappCanisterSettingsRequest) (*ManageDappCanisterSettingsResponse, error) {
	var r0 ManageDappCanisterSettingsResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"manage_dapp_canister_settings",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// RegisterDappCanister calls the "register_dapp_canister" method on the "root" canister.
func (a Agent) RegisterDappCanister(arg0 RegisterDappCanisterRequest) (*struct {
}, error) {
	var r0 struct {
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"register_dapp_canister",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// RegisterDappCanisters calls the "register_dapp_canisters" method on the "root" canister.
func (a Agent) RegisterDappCanisters(arg0 RegisterDappCanistersRequest) (*struct {
}, error) {
	var r0 struct {
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"register_dapp_canisters",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ResetTimers calls the "reset_timers" method on the "root" canister.
func (a Agent) ResetTimers(arg0 struct {
}) (*struct {
}, error) {
	var r0 struct {
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"reset_timers",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetDappControllers calls the "set_dapp_controllers" method on the "root" canister.
func (a Agent) SetDappControllers(arg0 SetDappControllersRequest) (*SetDappControllersResponse, error) {
	var r0 SetDappControllersResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"set_dapp_controllers",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

type CanisterCallError struct {
	Code        *int32 `ic:"code,omitempty" json:"code,omitempty"`
	Description string `ic:"description" json:"description"`
}

type CanisterIdRecord struct {
	CanisterId principal.Principal `ic:"canister_id" json:"canister_id"`
}

type CanisterInstallMode struct {
	Reinstall *idl.Null `ic:"reinstall,variant"`
	Upgrade   *idl.Null `ic:"upgrade,variant"`
	Install   *idl.Null `ic:"install,variant"`
}

type CanisterStatusResult struct {
	Status                 CanisterStatusType       `ic:"status" json:"status"`
	MemorySize             idl.Nat                  `ic:"memory_size" json:"memory_size"`
	Cycles                 idl.Nat                  `ic:"cycles" json:"cycles"`
	Settings               DefiniteCanisterSettings `ic:"settings" json:"settings"`
	IdleCyclesBurnedPerDay *idl.Nat                 `ic:"idle_cycles_burned_per_day,omitempty" json:"idle_cycles_burned_per_day,omitempty"`
	ModuleHash             *[]byte                  `ic:"module_hash,omitempty" json:"module_hash,omitempty"`
	ReservedCycles         *idl.Nat                 `ic:"reserved_cycles,omitempty" json:"reserved_cycles,omitempty"`
}

type CanisterStatusResultV2 struct {
	Status                 CanisterStatusType           `ic:"status" json:"status"`
	MemorySize             idl.Nat                      `ic:"memory_size" json:"memory_size"`
	Cycles                 idl.Nat                      `ic:"cycles" json:"cycles"`
	Settings               DefiniteCanisterSettingsArgs `ic:"settings" json:"settings"`
	IdleCyclesBurnedPerDay idl.Nat                      `ic:"idle_cycles_burned_per_day" json:"idle_cycles_burned_per_day"`
	ModuleHash             *[]byte                      `ic:"module_hash,omitempty" json:"module_hash,omitempty"`
}

type CanisterStatusType struct {
	Stopped  *idl.Null `ic:"stopped,variant"`
	Stopping *idl.Null `ic:"stopping,variant"`
	Running  *idl.Null `ic:"running,variant"`
}

type CanisterSummary struct {
	Status     *CanisterStatusResultV2 `ic:"status,omitempty" json:"status,omitempty"`
	CanisterId *principal.Principal    `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
}

type ChangeCanisterRequest struct {
	Arg                  []byte              `ic:"arg" json:"arg"`
	WasmModule           []byte              `ic:"wasm_module" json:"wasm_module"`
	StopBeforeInstalling bool                `ic:"stop_before_installing" json:"stop_before_installing"`
	Mode                 CanisterInstallMode `ic:"mode" json:"mode"`
	CanisterId           principal.Principal `ic:"canister_id" json:"canister_id"`
	MemoryAllocation     *idl.Nat            `ic:"memory_allocation,omitempty" json:"memory_allocation,omitempty"`
	ComputeAllocation    *idl.Nat            `ic:"compute_allocation,omitempty" json:"compute_allocation,omitempty"`
}

type DefiniteCanisterSettings struct {
	FreezingThreshold   *idl.Nat              `ic:"freezing_threshold,omitempty" json:"freezing_threshold,omitempty"`
	Controllers         []principal.Principal `ic:"controllers" json:"controllers"`
	ReservedCyclesLimit *idl.Nat              `ic:"reserved_cycles_limit,omitempty" json:"reserved_cycles_limit,omitempty"`
	LogVisibility       *LogVisibility        `ic:"log_visibility,omitempty" json:"log_visibility,omitempty"`
	WasmMemoryLimit     *idl.Nat              `ic:"wasm_memory_limit,omitempty" json:"wasm_memory_limit,omitempty"`
	MemoryAllocation    *idl.Nat              `ic:"memory_allocation,omitempty" json:"memory_allocation,omitempty"`
	ComputeAllocation   *idl.Nat              `ic:"compute_allocation,omitempty" json:"compute_allocation,omitempty"`
}

type DefiniteCanisterSettingsArgs struct {
	FreezingThreshold idl.Nat               `ic:"freezing_threshold" json:"freezing_threshold"`
	Controllers       []principal.Principal `ic:"controllers" json:"controllers"`
	WasmMemoryLimit   *idl.Nat              `ic:"wasm_memory_limit,omitempty" json:"wasm_memory_limit,omitempty"`
	MemoryAllocation  idl.Nat               `ic:"memory_allocation" json:"memory_allocation"`
	ComputeAllocation idl.Nat               `ic:"compute_allocation" json:"compute_allocation"`
}

type FailedUpdate struct {
	Err            *CanisterCallError   `ic:"err,omitempty" json:"err,omitempty"`
	DappCanisterId *principal.Principal `ic:"dapp_canister_id,omitempty" json:"dapp_canister_id,omitempty"`
}

type GetSnsCanistersSummaryRequest struct {
	UpdateCanisterList *bool `ic:"update_canister_list,omitempty" json:"update_canister_list,omitempty"`
}

type GetSnsCanistersSummaryResponse struct {
	Root       *CanisterSummary  `ic:"root,omitempty" json:"root,omitempty"`
	Swap       *CanisterSummary  `ic:"swap,omitempty" json:"swap,omitempty"`
	Ledger     *CanisterSummary  `ic:"ledger,omitempty" json:"ledger,omitempty"`
	Index      *CanisterSummary  `ic:"index,omitempty" json:"index,omitempty"`
	Governance *CanisterSummary  `ic:"governance,omitempty" json:"governance,omitempty"`
	Dapps      []CanisterSummary `ic:"dapps" json:"dapps"`
	Archives   []CanisterSummary `ic:"archives" json:"archives"`
}

type GetTimersResponse struct {
	Timers *Timers `ic:"timers,omitempty" json:"timers,omitempty"`
}

type ListSnsCanistersResponse struct {
	Root       *principal.Principal  `ic:"root,omitempty" json:"root,omitempty"`
	Swap       *principal.Principal  `ic:"swap,omitempty" json:"swap,omitempty"`
	Ledger     *principal.Principal  `ic:"ledger,omitempty" json:"ledger,omitempty"`
	Index      *principal.Principal  `ic:"index,omitempty" json:"index,omitempty"`
	Governance *principal.Principal  `ic:"governance,omitempty" json:"governance,omitempty"`
	Dapps      []principal.Principal `ic:"dapps" json:"dapps"`
	Archives   []principal.Principal `ic:"archives" json:"archives"`
}

type LogVisibility struct {
	Controllers *idl.Null `ic:"controllers,variant"`
	Public      *idl.Null `ic:"public,variant"`
}

type ManageDappCanisterSettingsRequest struct {
	FreezingThreshold   *uint64               `ic:"freezing_threshold,omitempty" json:"freezing_threshold,omitempty"`
	CanisterIds         []principal.Principal `ic:"canister_ids" json:"canister_ids"`
	ReservedCyclesLimit *uint64               `ic:"reserved_cycles_limit,omitempty" json:"reserved_cycles_limit,omitempty"`
	LogVisibility       *int32                `ic:"log_visibility,omitempty" json:"log_visibility,omitempty"`
	WasmMemoryLimit     *uint64               `ic:"wasm_memory_limit,omitempty" json:"wasm_memory_limit,omitempty"`
	MemoryAllocation    *uint64               `ic:"memory_allocation,omitempty" json:"memory_allocation,omitempty"`
	ComputeAllocation   *uint64               `ic:"compute_allocation,omitempty" json:"compute_allocation,omitempty"`
}

type ManageDappCanisterSettingsResponse struct {
	FailureReason *string `ic:"failure_reason,omitempty" json:"failure_reason,omitempty"`
}

type RegisterDappCanisterRequest struct {
	CanisterId *principal.Principal `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
}

type RegisterDappCanistersRequest struct {
	CanisterIds []principal.Principal `ic:"canister_ids" json:"canister_ids"`
}

type SetDappControllersRequest struct {
	CanisterIds            *RegisterDappCanistersRequest `ic:"canister_ids,omitempty" json:"canister_ids,omitempty"`
	ControllerPrincipalIds []principal.Principal         `ic:"controller_principal_ids" json:"controller_principal_ids"`
}

type SetDappControllersResponse struct {
	FailedUpdates []FailedUpdate `ic:"failed_updates" json:"failed_updates"`
}

type SnsRootCanister struct {
	DappCanisterIds      []principal.Principal `ic:"dapp_canister_ids" json:"dapp_canister_ids"`
	Testflight           bool                  `ic:"testflight" json:"testflight"`
	ArchiveCanisterIds   []principal.Principal `ic:"archive_canister_ids" json:"archive_canister_ids"`
	GovernanceCanisterId *principal.Principal  `ic:"governance_canister_id,omitempty" json:"governance_canister_id,omitempty"`
	IndexCanisterId      *principal.Principal  `ic:"index_canister_id,omitempty" json:"index_canister_id,omitempty"`
	SwapCanisterId       *principal.Principal  `ic:"swap_canister_id,omitempty" json:"swap_canister_id,omitempty"`
	LedgerCanisterId     *principal.Principal  `ic:"ledger_canister_id,omitempty" json:"ledger_canister_id,omitempty"`
	Timers               *Timers               `ic:"timers,omitempty" json:"timers,omitempty"`
}

type Timers struct {
	RequiresPeriodicTasks       *bool   `ic:"requires_periodic_tasks,omitempty" json:"requires_periodic_tasks,omitempty"`
	LastResetTimestampSeconds   *uint64 `ic:"last_reset_timestamp_seconds,omitempty" json:"last_reset_timestamp_seconds,omitempty"`
	LastSpawnedTimestampSeconds *uint64 `ic:"last_spawned_timestamp_seconds,omitempty" json:"last_spawned_timestamp_seconds,omitempty"`
}
