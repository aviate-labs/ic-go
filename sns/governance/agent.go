// Package governance provides a client for the "governance" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package governance

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/principal"
)

type Account struct {
	Owner      *principal.Principal `ic:"owner,omitempty" json:"owner,omitempty"`
	Subaccount *Subaccount          `ic:"subaccount,omitempty" json:"subaccount,omitempty"`
}

type Action struct {
	ManageNervousSystemParameters      *NervousSystemParameters    `ic:"ManageNervousSystemParameters,variant"`
	AddGenericNervousSystemFunction    *NervousSystemFunction      `ic:"AddGenericNervousSystemFunction,variant"`
	ManageDappCanisterSettings         *ManageDappCanisterSettings `ic:"ManageDappCanisterSettings,variant"`
	RemoveGenericNervousSystemFunction *uint64                     `ic:"RemoveGenericNervousSystemFunction,variant"`
	UpgradeSnsToNextVersion            *struct {
	} `ic:"UpgradeSnsToNextVersion,variant"`
	AdvanceSnsTargetVersion      *AdvanceSnsTargetVersion      `ic:"AdvanceSnsTargetVersion,variant"`
	RegisterDappCanisters        *RegisterDappCanisters        `ic:"RegisterDappCanisters,variant"`
	TransferSnsTreasuryFunds     *TransferSnsTreasuryFunds     `ic:"TransferSnsTreasuryFunds,variant"`
	UpgradeSnsControlledCanister *UpgradeSnsControlledCanister `ic:"UpgradeSnsControlledCanister,variant"`
	DeregisterDappCanisters      *DeregisterDappCanisters      `ic:"DeregisterDappCanisters,variant"`
	MintSnsTokens                *MintSnsTokens                `ic:"MintSnsTokens,variant"`
	Unspecified                  *struct {
	} `ic:"Unspecified,variant"`
	ManageSnsMetadata                   *ManageSnsMetadata                   `ic:"ManageSnsMetadata,variant"`
	ExecuteGenericNervousSystemFunction *ExecuteGenericNervousSystemFunction `ic:"ExecuteGenericNervousSystemFunction,variant"`
	ManageLedgerParameters              *ManageLedgerParameters              `ic:"ManageLedgerParameters,variant"`
	Motion                              *Motion                              `ic:"Motion,variant"`
}

type ActionAuxiliary struct {
	TransferSnsTreasuryFunds *MintSnsTokensActionAuxiliary           `ic:"TransferSnsTreasuryFunds,variant"`
	MintSnsTokens            *MintSnsTokensActionAuxiliary           `ic:"MintSnsTokens,variant"`
	AdvanceSnsTargetVersion  *AdvanceSnsTargetVersionActionAuxiliary `ic:"AdvanceSnsTargetVersion,variant"`
}

type AddNeuronPermissions struct {
	PermissionsToAdd *NeuronPermissionList `ic:"permissions_to_add,omitempty" json:"permissions_to_add,omitempty"`
	PrincipalId      *principal.Principal  `ic:"principal_id,omitempty" json:"principal_id,omitempty"`
}

type AdvanceSnsTargetVersion struct {
	NewTarget *SnsVersion `ic:"new_target,omitempty" json:"new_target,omitempty"`
}

type AdvanceSnsTargetVersionActionAuxiliary struct {
	TargetVersion *SnsVersion `ic:"target_version,omitempty" json:"target_version,omitempty"`
}

// Agent is a client for the "governance" canister.
type Agent struct {
	*agent.Agent
	CanisterId principal.Principal
}

// NewAgent creates a new agent for the "governance" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &Agent{
		Agent:      a,
		CanisterId: canisterId,
	}, nil
}

// ClaimSwapNeurons calls the "claim_swap_neurons" method on the "governance" canister.
func (a Agent) ClaimSwapNeurons(arg0 ClaimSwapNeuronsRequest) (*ClaimSwapNeuronsResponse, error) {
	var r0 ClaimSwapNeuronsResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"claim_swap_neurons",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// FailStuckUpgradeInProgress calls the "fail_stuck_upgrade_in_progress" method on the "governance" canister.
func (a Agent) FailStuckUpgradeInProgress(arg0 struct {
}) (*struct {
}, error) {
	var r0 struct {
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"fail_stuck_upgrade_in_progress",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetBuildMetadata calls the "get_build_metadata" method on the "governance" canister.
func (a Agent) GetBuildMetadata() (*string, error) {
	var r0 string
	if err := a.Agent.Query(
		a.CanisterId,
		"get_build_metadata",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetLatestRewardEvent calls the "get_latest_reward_event" method on the "governance" canister.
func (a Agent) GetLatestRewardEvent() (*RewardEvent, error) {
	var r0 RewardEvent
	if err := a.Agent.Query(
		a.CanisterId,
		"get_latest_reward_event",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetMaturityModulation calls the "get_maturity_modulation" method on the "governance" canister.
func (a Agent) GetMaturityModulation(arg0 struct {
}) (*GetMaturityModulationResponse, error) {
	var r0 GetMaturityModulationResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"get_maturity_modulation",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetMetadata calls the "get_metadata" method on the "governance" canister.
func (a Agent) GetMetadata(arg0 struct {
}) (*GetMetadataResponse, error) {
	var r0 GetMetadataResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_metadata",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetMode calls the "get_mode" method on the "governance" canister.
func (a Agent) GetMode(arg0 struct {
}) (*GetModeResponse, error) {
	var r0 GetModeResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_mode",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNervousSystemParameters calls the "get_nervous_system_parameters" method on the "governance" canister.
func (a Agent) GetNervousSystemParameters(arg0 idl.Null) (*NervousSystemParameters, error) {
	var r0 NervousSystemParameters
	if err := a.Agent.Query(
		a.CanisterId,
		"get_nervous_system_parameters",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNeuron calls the "get_neuron" method on the "governance" canister.
func (a Agent) GetNeuron(arg0 GetNeuron) (*GetNeuronResponse, error) {
	var r0 GetNeuronResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_neuron",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetProposal calls the "get_proposal" method on the "governance" canister.
func (a Agent) GetProposal(arg0 GetProposal) (*GetProposalResponse, error) {
	var r0 GetProposalResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_proposal",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetRootCanisterStatus calls the "get_root_canister_status" method on the "governance" canister.
func (a Agent) GetRootCanisterStatus(arg0 idl.Null) (*CanisterStatusResultV2, error) {
	var r0 CanisterStatusResultV2
	if err := a.Agent.Call(
		a.CanisterId,
		"get_root_canister_status",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetRunningSnsVersion calls the "get_running_sns_version" method on the "governance" canister.
func (a Agent) GetRunningSnsVersion(arg0 struct {
}) (*GetRunningSnsVersionResponse, error) {
	var r0 GetRunningSnsVersionResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_running_sns_version",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetSnsInitializationParameters calls the "get_sns_initialization_parameters" method on the "governance" canister.
func (a Agent) GetSnsInitializationParameters(arg0 struct {
}) (*GetSnsInitializationParametersResponse, error) {
	var r0 GetSnsInitializationParametersResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_sns_initialization_parameters",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetTimers calls the "get_timers" method on the "governance" canister.
func (a Agent) GetTimers(arg0 struct {
}) (*GetTimersResponse, error) {
	var r0 GetTimersResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_timers",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetUpgradeJournal calls the "get_upgrade_journal" method on the "governance" canister.
func (a Agent) GetUpgradeJournal(arg0 GetUpgradeJournalRequest) (*GetUpgradeJournalResponse, error) {
	var r0 GetUpgradeJournalResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_upgrade_journal",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListNervousSystemFunctions calls the "list_nervous_system_functions" method on the "governance" canister.
func (a Agent) ListNervousSystemFunctions() (*ListNervousSystemFunctionsResponse, error) {
	var r0 ListNervousSystemFunctionsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_nervous_system_functions",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListNeurons calls the "list_neurons" method on the "governance" canister.
func (a Agent) ListNeurons(arg0 ListNeurons) (*ListNeuronsResponse, error) {
	var r0 ListNeuronsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_neurons",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListProposals calls the "list_proposals" method on the "governance" canister.
func (a Agent) ListProposals(arg0 ListProposals) (*ListProposalsResponse, error) {
	var r0 ListProposalsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_proposals",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ManageNeuron calls the "manage_neuron" method on the "governance" canister.
func (a Agent) ManageNeuron(arg0 ManageNeuron) (*ManageNeuronResponse, error) {
	var r0 ManageNeuronResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"manage_neuron",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ResetTimers calls the "reset_timers" method on the "governance" canister.
func (a Agent) ResetTimers(arg0 struct {
}) (*struct {
}, error) {
	var r0 struct {
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"reset_timers",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SetMode calls the "set_mode" method on the "governance" canister.
func (a Agent) SetMode(arg0 SetMode) (*struct {
}, error) {
	var r0 struct {
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"set_mode",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

type Amount struct {
	E8s uint64 `ic:"e8s" json:"e8s"`
}

type Ballot struct {
	Vote                 int32  `ic:"vote" json:"vote"`
	CastTimestampSeconds uint64 `ic:"cast_timestamp_seconds" json:"cast_timestamp_seconds"`
	VotingPower          uint64 `ic:"voting_power" json:"voting_power"`
}

type By struct {
	MemoAndController *MemoAndController `ic:"MemoAndController,variant"`
	NeuronId          *struct {
	} `ic:"NeuronId,variant"`
}

type CachedUpgradeSteps struct {
	UpgradeSteps              *Versions `ic:"upgrade_steps,omitempty" json:"upgrade_steps,omitempty"`
	RequestedTimestampSeconds *uint64   `ic:"requested_timestamp_seconds,omitempty" json:"requested_timestamp_seconds,omitempty"`
	ResponseTimestampSeconds  *uint64   `ic:"response_timestamp_seconds,omitempty" json:"response_timestamp_seconds,omitempty"`
}

type CanisterStatusResultV2 struct {
	Status                 CanisterStatusType           `ic:"status" json:"status"`
	MemorySize             idl.Nat                      `ic:"memory_size" json:"memory_size"`
	Cycles                 idl.Nat                      `ic:"cycles" json:"cycles"`
	Settings               DefiniteCanisterSettingsArgs `ic:"settings" json:"settings"`
	IdleCyclesBurnedPerDay idl.Nat                      `ic:"idle_cycles_burned_per_day" json:"idle_cycles_burned_per_day"`
	ModuleHash             *[]byte                      `ic:"module_hash,omitempty" json:"module_hash,omitempty"`
}

type CanisterStatusType struct {
	Stopped  *idl.Null `ic:"stopped,variant"`
	Stopping *idl.Null `ic:"stopping,variant"`
	Running  *idl.Null `ic:"running,variant"`
}

type ChangeAutoStakeMaturity struct {
	RequestedSettingForAutoStakeMaturity bool `ic:"requested_setting_for_auto_stake_maturity" json:"requested_setting_for_auto_stake_maturity"`
}

type ClaimOrRefresh struct {
	By *By `ic:"by,omitempty" json:"by,omitempty"`
}

type ClaimOrRefreshResponse struct {
	RefreshedNeuronId *NeuronId `ic:"refreshed_neuron_id,omitempty" json:"refreshed_neuron_id,omitempty"`
}

type ClaimSwapNeuronsRequest struct {
	NeuronRecipes *NeuronRecipes `ic:"neuron_recipes,omitempty" json:"neuron_recipes,omitempty"`
}

type ClaimSwapNeuronsResponse struct {
	ClaimSwapNeuronsResult *ClaimSwapNeuronsResult `ic:"claim_swap_neurons_result,omitempty" json:"claim_swap_neurons_result,omitempty"`
}

type ClaimSwapNeuronsResult struct {
	Ok  *ClaimedSwapNeurons `ic:"Ok,variant"`
	Err *int32              `ic:"Err,variant"`
}

type ClaimedSwapNeurons struct {
	SwapNeurons []SwapNeuron `ic:"swap_neurons" json:"swap_neurons"`
}

type Command struct {
	Split                   *Split                   `ic:"Split,variant"`
	Follow                  *Follow                  `ic:"Follow,variant"`
	DisburseMaturity        *DisburseMaturity        `ic:"DisburseMaturity,variant"`
	ClaimOrRefresh          *ClaimOrRefresh          `ic:"ClaimOrRefresh,variant"`
	Configure               *Configure               `ic:"Configure,variant"`
	RegisterVote            *RegisterVote            `ic:"RegisterVote,variant"`
	MakeProposal            *Proposal                `ic:"MakeProposal,variant"`
	StakeMaturity           *StakeMaturity           `ic:"StakeMaturity,variant"`
	RemoveNeuronPermissions *RemoveNeuronPermissions `ic:"RemoveNeuronPermissions,variant"`
	AddNeuronPermissions    *AddNeuronPermissions    `ic:"AddNeuronPermissions,variant"`
	MergeMaturity           *MergeMaturity           `ic:"MergeMaturity,variant"`
	Disburse                *Disburse                `ic:"Disburse,variant"`
}

type Command1 struct {
	Error  *GovernanceError `ic:"Error,variant"`
	Split  *SplitResponse   `ic:"Split,variant"`
	Follow *struct {
	} `ic:"Follow,variant"`
	DisburseMaturity *DisburseMaturityResponse `ic:"DisburseMaturity,variant"`
	ClaimOrRefresh   *ClaimOrRefreshResponse   `ic:"ClaimOrRefresh,variant"`
	Configure        *struct {
	} `ic:"Configure,variant"`
	RegisterVote *struct {
	} `ic:"RegisterVote,variant"`
	MakeProposal           *GetProposal `ic:"MakeProposal,variant"`
	RemoveNeuronPermission *struct {
	} `ic:"RemoveNeuronPermission,variant"`
	StakeMaturity       *StakeMaturityResponse `ic:"StakeMaturity,variant"`
	MergeMaturity       *MergeMaturityResponse `ic:"MergeMaturity,variant"`
	Disburse            *DisburseResponse      `ic:"Disburse,variant"`
	AddNeuronPermission *struct {
	} `ic:"AddNeuronPermission,variant"`
}

type Command2 struct {
	Split            *Split            `ic:"Split,variant"`
	Follow           *Follow           `ic:"Follow,variant"`
	DisburseMaturity *DisburseMaturity `ic:"DisburseMaturity,variant"`
	Configure        *Configure        `ic:"Configure,variant"`
	RegisterVote     *RegisterVote     `ic:"RegisterVote,variant"`
	SyncCommand      *struct {
	} `ic:"SyncCommand,variant"`
	MakeProposal             *Proposal                 `ic:"MakeProposal,variant"`
	FinalizeDisburseMaturity *FinalizeDisburseMaturity `ic:"FinalizeDisburseMaturity,variant"`
	ClaimOrRefreshNeuron     *ClaimOrRefresh           `ic:"ClaimOrRefreshNeuron,variant"`
	RemoveNeuronPermissions  *RemoveNeuronPermissions  `ic:"RemoveNeuronPermissions,variant"`
	AddNeuronPermissions     *AddNeuronPermissions     `ic:"AddNeuronPermissions,variant"`
	MergeMaturity            *MergeMaturity            `ic:"MergeMaturity,variant"`
	Disburse                 *Disburse                 `ic:"Disburse,variant"`
}

type Configure struct {
	Operation *Operation `ic:"operation,omitempty" json:"operation,omitempty"`
}

type Decimal struct {
	HumanReadable *string `ic:"human_readable,omitempty" json:"human_readable,omitempty"`
}

type DefaultFollowees struct {
	Followees []struct {
		Field0 uint64    `ic:"0" json:"0"`
		Field1 Followees `ic:"1" json:"1"`
	} `ic:"followees" json:"followees"`
}

type DefiniteCanisterSettingsArgs struct {
	FreezingThreshold idl.Nat               `ic:"freezing_threshold" json:"freezing_threshold"`
	Controllers       []principal.Principal `ic:"controllers" json:"controllers"`
	WasmMemoryLimit   *idl.Nat              `ic:"wasm_memory_limit,omitempty" json:"wasm_memory_limit,omitempty"`
	MemoryAllocation  idl.Nat               `ic:"memory_allocation" json:"memory_allocation"`
	ComputeAllocation idl.Nat               `ic:"compute_allocation" json:"compute_allocation"`
}

type DeregisterDappCanisters struct {
	CanisterIds    []principal.Principal `ic:"canister_ids" json:"canister_ids"`
	NewControllers []principal.Principal `ic:"new_controllers" json:"new_controllers"`
}

type Disburse struct {
	ToAccount *Account `ic:"to_account,omitempty" json:"to_account,omitempty"`
	Amount    *Amount  `ic:"amount,omitempty" json:"amount,omitempty"`
}

type DisburseMaturity struct {
	ToAccount            *Account `ic:"to_account,omitempty" json:"to_account,omitempty"`
	PercentageToDisburse uint32   `ic:"percentage_to_disburse" json:"percentage_to_disburse"`
}

type DisburseMaturityInProgress struct {
	TimestampOfDisbursementSeconds       uint64   `ic:"timestamp_of_disbursement_seconds" json:"timestamp_of_disbursement_seconds"`
	AmountE8s                            uint64   `ic:"amount_e8s" json:"amount_e8s"`
	AccountToDisburseTo                  *Account `ic:"account_to_disburse_to,omitempty" json:"account_to_disburse_to,omitempty"`
	FinalizeDisbursementTimestampSeconds *uint64  `ic:"finalize_disbursement_timestamp_seconds,omitempty" json:"finalize_disbursement_timestamp_seconds,omitempty"`
}

type DisburseMaturityResponse struct {
	AmountDisbursedE8s uint64  `ic:"amount_disbursed_e8s" json:"amount_disbursed_e8s"`
	AmountDeductedE8s  *uint64 `ic:"amount_deducted_e8s,omitempty" json:"amount_deducted_e8s,omitempty"`
}

type DisburseResponse struct {
	TransferBlockHeight uint64 `ic:"transfer_block_height" json:"transfer_block_height"`
}

type DissolveState struct {
	DissolveDelaySeconds          *uint64 `ic:"DissolveDelaySeconds,variant"`
	WhenDissolvedTimestampSeconds *uint64 `ic:"WhenDissolvedTimestampSeconds,variant"`
}

type ExecuteGenericNervousSystemFunction struct {
	FunctionId uint64 `ic:"function_id" json:"function_id"`
	Payload    []byte `ic:"payload" json:"payload"`
}

type FinalizeDisburseMaturity struct {
	AmountToBeDisbursedE8s uint64   `ic:"amount_to_be_disbursed_e8s" json:"amount_to_be_disbursed_e8s"`
	ToAccount              *Account `ic:"to_account,omitempty" json:"to_account,omitempty"`
}

type Follow struct {
	FunctionId uint64     `ic:"function_id" json:"function_id"`
	Followees  []NeuronId `ic:"followees" json:"followees"`
}

type Followees struct {
	Followees []NeuronId `ic:"followees" json:"followees"`
}

type FunctionType struct {
	NativeNervousSystemFunction *struct {
	} `ic:"NativeNervousSystemFunction,variant"`
	GenericNervousSystemFunction *GenericNervousSystemFunction `ic:"GenericNervousSystemFunction,variant"`
}

type GenericNervousSystemFunction struct {
	ValidatorCanisterId *principal.Principal `ic:"validator_canister_id,omitempty" json:"validator_canister_id,omitempty"`
	TargetCanisterId    *principal.Principal `ic:"target_canister_id,omitempty" json:"target_canister_id,omitempty"`
	ValidatorMethodName *string              `ic:"validator_method_name,omitempty" json:"validator_method_name,omitempty"`
	TargetMethodName    *string              `ic:"target_method_name,omitempty" json:"target_method_name,omitempty"`
}

type GetMaturityModulationResponse struct {
	MaturityModulation *MaturityModulation `ic:"maturity_modulation,omitempty" json:"maturity_modulation,omitempty"`
}

type GetMetadataResponse struct {
	Url         *string `ic:"url,omitempty" json:"url,omitempty"`
	Logo        *string `ic:"logo,omitempty" json:"logo,omitempty"`
	Name        *string `ic:"name,omitempty" json:"name,omitempty"`
	Description *string `ic:"description,omitempty" json:"description,omitempty"`
}

type GetModeResponse struct {
	Mode *int32 `ic:"mode,omitempty" json:"mode,omitempty"`
}

type GetNeuron struct {
	NeuronId *NeuronId `ic:"neuron_id,omitempty" json:"neuron_id,omitempty"`
}

type GetNeuronResponse struct {
	Result *Result `ic:"result,omitempty" json:"result,omitempty"`
}

type GetProposal struct {
	ProposalId *ProposalId `ic:"proposal_id,omitempty" json:"proposal_id,omitempty"`
}

type GetProposalResponse struct {
	Result *Result1 `ic:"result,omitempty" json:"result,omitempty"`
}

type GetRunningSnsVersionResponse struct {
	DeployedVersion *Version `ic:"deployed_version,omitempty" json:"deployed_version,omitempty"`
	PendingVersion  *struct {
		MarkFailedAtSeconds uint64   `ic:"mark_failed_at_seconds" json:"mark_failed_at_seconds"`
		CheckingUpgradeLock uint64   `ic:"checking_upgrade_lock" json:"checking_upgrade_lock"`
		ProposalId          uint64   `ic:"proposal_id" json:"proposal_id"`
		TargetVersion       *Version `ic:"target_version,omitempty" json:"target_version,omitempty"`
	} `ic:"pending_version,omitempty" json:"pending_version,omitempty"`
}

type GetSnsInitializationParametersResponse struct {
	SnsInitializationParameters string `ic:"sns_initialization_parameters" json:"sns_initialization_parameters"`
}

type GetTimersResponse struct {
	Timers *Timers `ic:"timers,omitempty" json:"timers,omitempty"`
}

type GetUpgradeJournalRequest struct {
	Limit  *uint64 `ic:"limit,omitempty" json:"limit,omitempty"`
	Offset *uint64 `ic:"offset,omitempty" json:"offset,omitempty"`
}

type GetUpgradeJournalResponse struct {
	UpgradeSteps             *Versions       `ic:"upgrade_steps,omitempty" json:"upgrade_steps,omitempty"`
	ResponseTimestampSeconds *uint64         `ic:"response_timestamp_seconds,omitempty" json:"response_timestamp_seconds,omitempty"`
	TargetVersion            *Version        `ic:"target_version,omitempty" json:"target_version,omitempty"`
	DeployedVersion          *Version        `ic:"deployed_version,omitempty" json:"deployed_version,omitempty"`
	UpgradeJournal           *UpgradeJournal `ic:"upgrade_journal,omitempty" json:"upgrade_journal,omitempty"`
	UpgradeJournalEntryCount *uint64         `ic:"upgrade_journal_entry_count,omitempty" json:"upgrade_journal_entry_count,omitempty"`
}

type Governance struct {
	RootCanisterId             *principal.Principal `ic:"root_canister_id,omitempty" json:"root_canister_id,omitempty"`
	IdToNervousSystemFunctions []struct {
		Field0 uint64                `ic:"0" json:"0"`
		Field1 NervousSystemFunction `ic:"1" json:"1"`
	} `ic:"id_to_nervous_system_functions" json:"id_to_nervous_system_functions"`
	Metrics                      *GovernanceCachedMetrics `ic:"metrics,omitempty" json:"metrics,omitempty"`
	MaturityModulation           *MaturityModulation      `ic:"maturity_modulation,omitempty" json:"maturity_modulation,omitempty"`
	Mode                         int32                    `ic:"mode" json:"mode"`
	Parameters                   *NervousSystemParameters `ic:"parameters,omitempty" json:"parameters,omitempty"`
	IsFinalizingDisburseMaturity *bool                    `ic:"is_finalizing_disburse_maturity,omitempty" json:"is_finalizing_disburse_maturity,omitempty"`
	DeployedVersion              *Version                 `ic:"deployed_version,omitempty" json:"deployed_version,omitempty"`
	CachedUpgradeSteps           *CachedUpgradeSteps      `ic:"cached_upgrade_steps,omitempty" json:"cached_upgrade_steps,omitempty"`
	SnsInitializationParameters  string                   `ic:"sns_initialization_parameters" json:"sns_initialization_parameters"`
	LatestRewardEvent            *RewardEvent             `ic:"latest_reward_event,omitempty" json:"latest_reward_event,omitempty"`
	PendingVersion               *PendingVersion          `ic:"pending_version,omitempty" json:"pending_version,omitempty"`
	SwapCanisterId               *principal.Principal     `ic:"swap_canister_id,omitempty" json:"swap_canister_id,omitempty"`
	LedgerCanisterId             *principal.Principal     `ic:"ledger_canister_id,omitempty" json:"ledger_canister_id,omitempty"`
	Proposals                    []struct {
		Field0 uint64       `ic:"0" json:"0"`
		Field1 ProposalData `ic:"1" json:"1"`
	} `ic:"proposals" json:"proposals"`
	InFlightCommands []struct {
		Field0 string                `ic:"0" json:"0"`
		Field1 NeuronInFlightCommand `ic:"1" json:"1"`
	} `ic:"in_flight_commands" json:"in_flight_commands"`
	SnsMetadata *ManageSnsMetadata `ic:"sns_metadata,omitempty" json:"sns_metadata,omitempty"`
	Neurons     []struct {
		Field0 string `ic:"0" json:"0"`
		Field1 Neuron `ic:"1" json:"1"`
	} `ic:"neurons" json:"neurons"`
	GenesisTimestampSeconds uint64          `ic:"genesis_timestamp_seconds" json:"genesis_timestamp_seconds"`
	TargetVersion           *Version        `ic:"target_version,omitempty" json:"target_version,omitempty"`
	Timers                  *Timers         `ic:"timers,omitempty" json:"timers,omitempty"`
	UpgradeJournal          *UpgradeJournal `ic:"upgrade_journal,omitempty" json:"upgrade_journal,omitempty"`
}

type GovernanceCachedMetrics struct {
	NotDissolvingNeuronsE8sBuckets []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"not_dissolving_neurons_e8s_buckets" json:"not_dissolving_neurons_e8s_buckets"`
	GarbageCollectableNeuronsCount   uint64 `ic:"garbage_collectable_neurons_count" json:"garbage_collectable_neurons_count"`
	NeuronsWithInvalidStakeCount     uint64 `ic:"neurons_with_invalid_stake_count" json:"neurons_with_invalid_stake_count"`
	NotDissolvingNeuronsCountBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"not_dissolving_neurons_count_buckets" json:"not_dissolving_neurons_count_buckets"`
	NeuronsWithLessThan6MonthsDissolveDelayCount uint64 `ic:"neurons_with_less_than_6_months_dissolve_delay_count" json:"neurons_with_less_than_6_months_dissolve_delay_count"`
	DissolvedNeuronsCount                        uint64 `ic:"dissolved_neurons_count" json:"dissolved_neurons_count"`
	TotalStakedE8s                               uint64 `ic:"total_staked_e8s" json:"total_staked_e8s"`
	TotalSupplyGovernanceTokens                  uint64 `ic:"total_supply_governance_tokens" json:"total_supply_governance_tokens"`
	NotDissolvingNeuronsCount                    uint64 `ic:"not_dissolving_neurons_count" json:"not_dissolving_neurons_count"`
	DissolvedNeuronsE8s                          uint64 `ic:"dissolved_neurons_e8s" json:"dissolved_neurons_e8s"`
	NeuronsWithLessThan6MonthsDissolveDelayE8s   uint64 `ic:"neurons_with_less_than_6_months_dissolve_delay_e8s" json:"neurons_with_less_than_6_months_dissolve_delay_e8s"`
	DissolvingNeuronsCountBuckets                []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"dissolving_neurons_count_buckets" json:"dissolving_neurons_count_buckets"`
	DissolvingNeuronsCount      uint64 `ic:"dissolving_neurons_count" json:"dissolving_neurons_count"`
	DissolvingNeuronsE8sBuckets []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"dissolving_neurons_e8s_buckets" json:"dissolving_neurons_e8s_buckets"`
	TimestampSeconds uint64 `ic:"timestamp_seconds" json:"timestamp_seconds"`
}

type GovernanceError struct {
	ErrorMessage string `ic:"error_message" json:"error_message"`
	ErrorType    int32  `ic:"error_type" json:"error_type"`
}

type IncreaseDissolveDelay struct {
	AdditionalDissolveDelaySeconds uint32 `ic:"additional_dissolve_delay_seconds" json:"additional_dissolve_delay_seconds"`
}

type ListNervousSystemFunctionsResponse struct {
	ReservedIds []uint64                `ic:"reserved_ids" json:"reserved_ids"`
	Functions   []NervousSystemFunction `ic:"functions" json:"functions"`
}

type ListNeurons struct {
	OfPrincipal *principal.Principal `ic:"of_principal,omitempty" json:"of_principal,omitempty"`
	Limit       uint32               `ic:"limit" json:"limit"`
	StartPageAt *NeuronId            `ic:"start_page_at,omitempty" json:"start_page_at,omitempty"`
}

type ListNeuronsResponse struct {
	Neurons []Neuron `ic:"neurons" json:"neurons"`
}

type ListProposals struct {
	IncludeRewardStatus []int32     `ic:"include_reward_status" json:"include_reward_status"`
	BeforeProposal      *ProposalId `ic:"before_proposal,omitempty" json:"before_proposal,omitempty"`
	Limit               uint32      `ic:"limit" json:"limit"`
	ExcludeType         []uint64    `ic:"exclude_type" json:"exclude_type"`
	IncludeStatus       []int32     `ic:"include_status" json:"include_status"`
}

type ListProposalsResponse struct {
	IncludeBallotsByCaller *bool          `ic:"include_ballots_by_caller,omitempty" json:"include_ballots_by_caller,omitempty"`
	Proposals              []ProposalData `ic:"proposals" json:"proposals"`
}

type ManageDappCanisterSettings struct {
	FreezingThreshold   *uint64               `ic:"freezing_threshold,omitempty" json:"freezing_threshold,omitempty"`
	CanisterIds         []principal.Principal `ic:"canister_ids" json:"canister_ids"`
	ReservedCyclesLimit *uint64               `ic:"reserved_cycles_limit,omitempty" json:"reserved_cycles_limit,omitempty"`
	LogVisibility       *int32                `ic:"log_visibility,omitempty" json:"log_visibility,omitempty"`
	WasmMemoryLimit     *uint64               `ic:"wasm_memory_limit,omitempty" json:"wasm_memory_limit,omitempty"`
	MemoryAllocation    *uint64               `ic:"memory_allocation,omitempty" json:"memory_allocation,omitempty"`
	ComputeAllocation   *uint64               `ic:"compute_allocation,omitempty" json:"compute_allocation,omitempty"`
}

type ManageLedgerParameters struct {
	TokenSymbol *string `ic:"token_symbol,omitempty" json:"token_symbol,omitempty"`
	TransferFee *uint64 `ic:"transfer_fee,omitempty" json:"transfer_fee,omitempty"`
	TokenLogo   *string `ic:"token_logo,omitempty" json:"token_logo,omitempty"`
	TokenName   *string `ic:"token_name,omitempty" json:"token_name,omitempty"`
}

type ManageNeuron struct {
	Subaccount []byte   `ic:"subaccount" json:"subaccount"`
	Command    *Command `ic:"command,omitempty" json:"command,omitempty"`
}

type ManageNeuronResponse struct {
	Command *Command1 `ic:"command,omitempty" json:"command,omitempty"`
}

type ManageSnsMetadata struct {
	Url         *string `ic:"url,omitempty" json:"url,omitempty"`
	Logo        *string `ic:"logo,omitempty" json:"logo,omitempty"`
	Name        *string `ic:"name,omitempty" json:"name,omitempty"`
	Description *string `ic:"description,omitempty" json:"description,omitempty"`
}

type MaturityModulation struct {
	CurrentBasisPoints        *int32  `ic:"current_basis_points,omitempty" json:"current_basis_points,omitempty"`
	UpdatedAtTimestampSeconds *uint64 `ic:"updated_at_timestamp_seconds,omitempty" json:"updated_at_timestamp_seconds,omitempty"`
}

type MemoAndController struct {
	Controller *principal.Principal `ic:"controller,omitempty" json:"controller,omitempty"`
	Memo       uint64               `ic:"memo" json:"memo"`
}

type MergeMaturity struct {
	PercentageToMerge uint32 `ic:"percentage_to_merge" json:"percentage_to_merge"`
}

type MergeMaturityResponse struct {
	MergedMaturityE8s uint64 `ic:"merged_maturity_e8s" json:"merged_maturity_e8s"`
	NewStakeE8s       uint64 `ic:"new_stake_e8s" json:"new_stake_e8s"`
}

type MintSnsTokens struct {
	ToPrincipal  *principal.Principal `ic:"to_principal,omitempty" json:"to_principal,omitempty"`
	ToSubaccount *Subaccount          `ic:"to_subaccount,omitempty" json:"to_subaccount,omitempty"`
	Memo         *uint64              `ic:"memo,omitempty" json:"memo,omitempty"`
	AmountE8s    *uint64              `ic:"amount_e8s,omitempty" json:"amount_e8s,omitempty"`
}

type MintSnsTokensActionAuxiliary struct {
	Valuation *Valuation `ic:"valuation,omitempty" json:"valuation,omitempty"`
}

type Motion struct {
	MotionText string `ic:"motion_text" json:"motion_text"`
}

type NervousSystemFunction struct {
	Id           uint64        `ic:"id" json:"id"`
	Name         string        `ic:"name" json:"name"`
	Description  *string       `ic:"description,omitempty" json:"description,omitempty"`
	FunctionType *FunctionType `ic:"function_type,omitempty" json:"function_type,omitempty"`
}

type NervousSystemParameters struct {
	DefaultFollowees                        *DefaultFollowees        `ic:"default_followees,omitempty" json:"default_followees,omitempty"`
	MaxDissolveDelaySeconds                 *uint64                  `ic:"max_dissolve_delay_seconds,omitempty" json:"max_dissolve_delay_seconds,omitempty"`
	MaxDissolveDelayBonusPercentage         *uint64                  `ic:"max_dissolve_delay_bonus_percentage,omitempty" json:"max_dissolve_delay_bonus_percentage,omitempty"`
	MaxFolloweesPerFunction                 *uint64                  `ic:"max_followees_per_function,omitempty" json:"max_followees_per_function,omitempty"`
	NeuronClaimerPermissions                *NeuronPermissionList    `ic:"neuron_claimer_permissions,omitempty" json:"neuron_claimer_permissions,omitempty"`
	NeuronMinimumStakeE8s                   *uint64                  `ic:"neuron_minimum_stake_e8s,omitempty" json:"neuron_minimum_stake_e8s,omitempty"`
	MaxNeuronAgeForAgeBonus                 *uint64                  `ic:"max_neuron_age_for_age_bonus,omitempty" json:"max_neuron_age_for_age_bonus,omitempty"`
	InitialVotingPeriodSeconds              *uint64                  `ic:"initial_voting_period_seconds,omitempty" json:"initial_voting_period_seconds,omitempty"`
	NeuronMinimumDissolveDelayToVoteSeconds *uint64                  `ic:"neuron_minimum_dissolve_delay_to_vote_seconds,omitempty" json:"neuron_minimum_dissolve_delay_to_vote_seconds,omitempty"`
	RejectCostE8s                           *uint64                  `ic:"reject_cost_e8s,omitempty" json:"reject_cost_e8s,omitempty"`
	MaxProposalsToKeepPerAction             *uint32                  `ic:"max_proposals_to_keep_per_action,omitempty" json:"max_proposals_to_keep_per_action,omitempty"`
	WaitForQuietDeadlineIncreaseSeconds     *uint64                  `ic:"wait_for_quiet_deadline_increase_seconds,omitempty" json:"wait_for_quiet_deadline_increase_seconds,omitempty"`
	MaxNumberOfNeurons                      *uint64                  `ic:"max_number_of_neurons,omitempty" json:"max_number_of_neurons,omitempty"`
	TransactionFeeE8s                       *uint64                  `ic:"transaction_fee_e8s,omitempty" json:"transaction_fee_e8s,omitempty"`
	MaxNumberOfProposalsWithBallots         *uint64                  `ic:"max_number_of_proposals_with_ballots,omitempty" json:"max_number_of_proposals_with_ballots,omitempty"`
	MaxAgeBonusPercentage                   *uint64                  `ic:"max_age_bonus_percentage,omitempty" json:"max_age_bonus_percentage,omitempty"`
	NeuronGrantablePermissions              *NeuronPermissionList    `ic:"neuron_grantable_permissions,omitempty" json:"neuron_grantable_permissions,omitempty"`
	VotingRewardsParameters                 *VotingRewardsParameters `ic:"voting_rewards_parameters,omitempty" json:"voting_rewards_parameters,omitempty"`
	MaturityModulationDisabled              *bool                    `ic:"maturity_modulation_disabled,omitempty" json:"maturity_modulation_disabled,omitempty"`
	MaxNumberOfPrincipalsPerNeuron          *uint64                  `ic:"max_number_of_principals_per_neuron,omitempty" json:"max_number_of_principals_per_neuron,omitempty"`
}

type Neuron struct {
	Id                              *NeuronId                    `ic:"id,omitempty" json:"id,omitempty"`
	StakedMaturityE8sEquivalent     *uint64                      `ic:"staked_maturity_e8s_equivalent,omitempty" json:"staked_maturity_e8s_equivalent,omitempty"`
	Permissions                     []NeuronPermission           `ic:"permissions" json:"permissions"`
	MaturityE8sEquivalent           uint64                       `ic:"maturity_e8s_equivalent" json:"maturity_e8s_equivalent"`
	CachedNeuronStakeE8s            uint64                       `ic:"cached_neuron_stake_e8s" json:"cached_neuron_stake_e8s"`
	CreatedTimestampSeconds         uint64                       `ic:"created_timestamp_seconds" json:"created_timestamp_seconds"`
	SourceNnsNeuronId               *uint64                      `ic:"source_nns_neuron_id,omitempty" json:"source_nns_neuron_id,omitempty"`
	AutoStakeMaturity               *bool                        `ic:"auto_stake_maturity,omitempty" json:"auto_stake_maturity,omitempty"`
	AgingSinceTimestampSeconds      uint64                       `ic:"aging_since_timestamp_seconds" json:"aging_since_timestamp_seconds"`
	DissolveState                   *DissolveState               `ic:"dissolve_state,omitempty" json:"dissolve_state,omitempty"`
	VotingPowerPercentageMultiplier uint64                       `ic:"voting_power_percentage_multiplier" json:"voting_power_percentage_multiplier"`
	VestingPeriodSeconds            *uint64                      `ic:"vesting_period_seconds,omitempty" json:"vesting_period_seconds,omitempty"`
	DisburseMaturityInProgress      []DisburseMaturityInProgress `ic:"disburse_maturity_in_progress" json:"disburse_maturity_in_progress"`
	Followees                       []struct {
		Field0 uint64    `ic:"0" json:"0"`
		Field1 Followees `ic:"1" json:"1"`
	} `ic:"followees" json:"followees"`
	NeuronFeesE8s uint64 `ic:"neuron_fees_e8s" json:"neuron_fees_e8s"`
}

type NeuronId struct {
	Id []byte `ic:"id" json:"id"`
}

type NeuronIds struct {
	NeuronIds []NeuronId `ic:"neuron_ids" json:"neuron_ids"`
}

type NeuronInFlightCommand struct {
	Command   *Command2 `ic:"command,omitempty" json:"command,omitempty"`
	Timestamp uint64    `ic:"timestamp" json:"timestamp"`
}

type NeuronParameters struct {
	Controller           *principal.Principal `ic:"controller,omitempty" json:"controller,omitempty"`
	DissolveDelaySeconds *uint64              `ic:"dissolve_delay_seconds,omitempty" json:"dissolve_delay_seconds,omitempty"`
	SourceNnsNeuronId    *uint64              `ic:"source_nns_neuron_id,omitempty" json:"source_nns_neuron_id,omitempty"`
	StakeE8s             *uint64              `ic:"stake_e8s,omitempty" json:"stake_e8s,omitempty"`
	Followees            []NeuronId           `ic:"followees" json:"followees"`
	Hotkey               *principal.Principal `ic:"hotkey,omitempty" json:"hotkey,omitempty"`
	NeuronId             *NeuronId            `ic:"neuron_id,omitempty" json:"neuron_id,omitempty"`
}

type NeuronPermission struct {
	Principal      *principal.Principal `ic:""principal",omitempty" json:""principal",omitempty"`
	PermissionType []int32              `ic:"permission_type" json:"permission_type"`
}

type NeuronPermissionList struct {
	Permissions []int32 `ic:"permissions" json:"permissions"`
}

type NeuronRecipe struct {
	Controller           *principal.Principal `ic:"controller,omitempty" json:"controller,omitempty"`
	DissolveDelaySeconds *uint64              `ic:"dissolve_delay_seconds,omitempty" json:"dissolve_delay_seconds,omitempty"`
	Participant          *Participant         `ic:"participant,omitempty" json:"participant,omitempty"`
	StakeE8s             *uint64              `ic:"stake_e8s,omitempty" json:"stake_e8s,omitempty"`
	Followees            *NeuronIds           `ic:"followees,omitempty" json:"followees,omitempty"`
	NeuronId             *NeuronId            `ic:"neuron_id,omitempty" json:"neuron_id,omitempty"`
}

type NeuronRecipes struct {
	NeuronRecipes []NeuronRecipe `ic:"neuron_recipes" json:"neuron_recipes"`
}

type NeuronsFund struct {
	NnsNeuronHotkeys    *Principals          `ic:"nns_neuron_hotkeys,omitempty" json:"nns_neuron_hotkeys,omitempty"`
	NnsNeuronController *principal.Principal `ic:"nns_neuron_controller,omitempty" json:"nns_neuron_controller,omitempty"`
	NnsNeuronId         *uint64              `ic:"nns_neuron_id,omitempty" json:"nns_neuron_id,omitempty"`
}

type Operation struct {
	ChangeAutoStakeMaturity *ChangeAutoStakeMaturity `ic:"ChangeAutoStakeMaturity,variant"`
	StopDissolving          *struct {
	} `ic:"StopDissolving,variant"`
	StartDissolving *struct {
	} `ic:"StartDissolving,variant"`
	IncreaseDissolveDelay *IncreaseDissolveDelay `ic:"IncreaseDissolveDelay,variant"`
	SetDissolveTimestamp  *SetDissolveTimestamp  `ic:"SetDissolveTimestamp,variant"`
}

type Participant struct {
	NeuronsFund *NeuronsFund `ic:"NeuronsFund,variant"`
	Direct      *struct {
	} `ic:"Direct,variant"`
}

type PendingVersion struct {
	MarkFailedAtSeconds uint64   `ic:"mark_failed_at_seconds" json:"mark_failed_at_seconds"`
	CheckingUpgradeLock uint64   `ic:"checking_upgrade_lock" json:"checking_upgrade_lock"`
	ProposalId          *uint64  `ic:"proposal_id,omitempty" json:"proposal_id,omitempty"`
	TargetVersion       *Version `ic:"target_version,omitempty" json:"target_version,omitempty"`
}

type Percentage struct {
	BasisPoints *uint64 `ic:"basis_points,omitempty" json:"basis_points,omitempty"`
}

type Principals struct {
	Principals []principal.Principal `ic:"principals" json:"principals"`
}

type Proposal struct {
	Url     string  `ic:"url" json:"url"`
	Title   string  `ic:"title" json:"title"`
	Action  *Action `ic:"action,omitempty" json:"action,omitempty"`
	Summary string  `ic:"summary" json:"summary"`
}

type ProposalData struct {
	Id                   *ProposalId      `ic:"id,omitempty" json:"id,omitempty"`
	PayloadTextRendering *string          `ic:"payload_text_rendering,omitempty" json:"payload_text_rendering,omitempty"`
	Action               uint64           `ic:"action" json:"action"`
	FailureReason        *GovernanceError `ic:"failure_reason,omitempty" json:"failure_reason,omitempty"`
	ActionAuxiliary      *ActionAuxiliary `ic:"action_auxiliary,omitempty" json:"action_auxiliary,omitempty"`
	Ballots              []struct {
		Field0 string `ic:"0" json:"0"`
		Field1 Ballot `ic:"1" json:"1"`
	} `ic:"ballots" json:"ballots"`
	MinimumYesProportionOfTotal         *Percentage        `ic:"minimum_yes_proportion_of_total,omitempty" json:"minimum_yes_proportion_of_total,omitempty"`
	RewardEventRound                    uint64             `ic:"reward_event_round" json:"reward_event_round"`
	FailedTimestampSeconds              uint64             `ic:"failed_timestamp_seconds" json:"failed_timestamp_seconds"`
	RewardEventEndTimestampSeconds      *uint64            `ic:"reward_event_end_timestamp_seconds,omitempty" json:"reward_event_end_timestamp_seconds,omitempty"`
	ProposalCreationTimestampSeconds    uint64             `ic:"proposal_creation_timestamp_seconds" json:"proposal_creation_timestamp_seconds"`
	InitialVotingPeriodSeconds          uint64             `ic:"initial_voting_period_seconds" json:"initial_voting_period_seconds"`
	RejectCostE8s                       uint64             `ic:"reject_cost_e8s" json:"reject_cost_e8s"`
	LatestTally                         *Tally             `ic:"latest_tally,omitempty" json:"latest_tally,omitempty"`
	WaitForQuietDeadlineIncreaseSeconds uint64             `ic:"wait_for_quiet_deadline_increase_seconds" json:"wait_for_quiet_deadline_increase_seconds"`
	DecidedTimestampSeconds             uint64             `ic:"decided_timestamp_seconds" json:"decided_timestamp_seconds"`
	Proposal                            *Proposal          `ic:"proposal,omitempty" json:"proposal,omitempty"`
	Proposer                            *NeuronId          `ic:"proposer,omitempty" json:"proposer,omitempty"`
	WaitForQuietState                   *WaitForQuietState `ic:"wait_for_quiet_state,omitempty" json:"wait_for_quiet_state,omitempty"`
	MinimumYesProportionOfExercised     *Percentage        `ic:"minimum_yes_proportion_of_exercised,omitempty" json:"minimum_yes_proportion_of_exercised,omitempty"`
	IsEligibleForRewards                bool               `ic:"is_eligible_for_rewards" json:"is_eligible_for_rewards"`
	ExecutedTimestampSeconds            uint64             `ic:"executed_timestamp_seconds" json:"executed_timestamp_seconds"`
}

type ProposalId struct {
	Id uint64 `ic:"id" json:"id"`
}

type RegisterDappCanisters struct {
	CanisterIds []principal.Principal `ic:"canister_ids" json:"canister_ids"`
}

type RegisterVote struct {
	Vote     int32       `ic:"vote" json:"vote"`
	Proposal *ProposalId `ic:"proposal,omitempty" json:"proposal,omitempty"`
}

type RemoveNeuronPermissions struct {
	PermissionsToRemove *NeuronPermissionList `ic:"permissions_to_remove,omitempty" json:"permissions_to_remove,omitempty"`
	PrincipalId         *principal.Principal  `ic:"principal_id,omitempty" json:"principal_id,omitempty"`
}

type Result struct {
	Error  *GovernanceError `ic:"Error,variant"`
	Neuron *Neuron          `ic:"Neuron,variant"`
}

type Result1 struct {
	Error    *GovernanceError `ic:"Error,variant"`
	Proposal *ProposalData    `ic:"Proposal,variant"`
}

type RewardEvent struct {
	RoundsSinceLastDistribution *uint64      `ic:"rounds_since_last_distribution,omitempty" json:"rounds_since_last_distribution,omitempty"`
	ActualTimestampSeconds      uint64       `ic:"actual_timestamp_seconds" json:"actual_timestamp_seconds"`
	EndTimestampSeconds         *uint64      `ic:"end_timestamp_seconds,omitempty" json:"end_timestamp_seconds,omitempty"`
	TotalAvailableE8sEquivalent *uint64      `ic:"total_available_e8s_equivalent,omitempty" json:"total_available_e8s_equivalent,omitempty"`
	DistributedE8sEquivalent    uint64       `ic:"distributed_e8s_equivalent" json:"distributed_e8s_equivalent"`
	Round                       uint64       `ic:"round" json:"round"`
	SettledProposals            []ProposalId `ic:"settled_proposals" json:"settled_proposals"`
}

type SetDissolveTimestamp struct {
	DissolveTimestampSeconds uint64 `ic:"dissolve_timestamp_seconds" json:"dissolve_timestamp_seconds"`
}

type SetMode struct {
	Mode int32 `ic:"mode" json:"mode"`
}

type SnsVersion struct {
	GovernanceWasmHash *[]byte `ic:"governance_wasm_hash,omitempty" json:"governance_wasm_hash,omitempty"`
	SwapWasmHash       *[]byte `ic:"swap_wasm_hash,omitempty" json:"swap_wasm_hash,omitempty"`
	RootWasmHash       *[]byte `ic:"root_wasm_hash,omitempty" json:"root_wasm_hash,omitempty"`
	IndexWasmHash      *[]byte `ic:"index_wasm_hash,omitempty" json:"index_wasm_hash,omitempty"`
	LedgerWasmHash     *[]byte `ic:"ledger_wasm_hash,omitempty" json:"ledger_wasm_hash,omitempty"`
	ArchiveWasmHash    *[]byte `ic:"archive_wasm_hash,omitempty" json:"archive_wasm_hash,omitempty"`
}

type Split struct {
	Memo      uint64 `ic:"memo" json:"memo"`
	AmountE8s uint64 `ic:"amount_e8s" json:"amount_e8s"`
}

type SplitResponse struct {
	CreatedNeuronId *NeuronId `ic:"created_neuron_id,omitempty" json:"created_neuron_id,omitempty"`
}

type StakeMaturity struct {
	PercentageToStake *uint32 `ic:"percentage_to_stake,omitempty" json:"percentage_to_stake,omitempty"`
}

type StakeMaturityResponse struct {
	MaturityE8s       uint64 `ic:"maturity_e8s" json:"maturity_e8s"`
	StakedMaturityE8s uint64 `ic:"staked_maturity_e8s" json:"staked_maturity_e8s"`
}

type Subaccount struct {
	Subaccount []byte `ic:"subaccount" json:"subaccount"`
}

type SwapNeuron struct {
	Id     *NeuronId `ic:"id,omitempty" json:"id,omitempty"`
	Status int32     `ic:"status" json:"status"`
}

type Tally struct {
	No               uint64 `ic:"no" json:"no"`
	Yes              uint64 `ic:"yes" json:"yes"`
	Total            uint64 `ic:"total" json:"total"`
	TimestampSeconds uint64 `ic:"timestamp_seconds" json:"timestamp_seconds"`
}

type TargetVersionReset struct {
	NewTargetVersion *Version `ic:"new_target_version,omitempty" json:"new_target_version,omitempty"`
	OldTargetVersion *Version `ic:"old_target_version,omitempty" json:"old_target_version,omitempty"`
	HumanReadable    *string  `ic:"human_readable,omitempty" json:"human_readable,omitempty"`
}

type TargetVersionSet struct {
	NewTargetVersion *Version `ic:"new_target_version,omitempty" json:"new_target_version,omitempty"`
	OldTargetVersion *Version `ic:"old_target_version,omitempty" json:"old_target_version,omitempty"`
}

type Timers struct {
	RequiresPeriodicTasks       *bool   `ic:"requires_periodic_tasks,omitempty" json:"requires_periodic_tasks,omitempty"`
	LastResetTimestampSeconds   *uint64 `ic:"last_reset_timestamp_seconds,omitempty" json:"last_reset_timestamp_seconds,omitempty"`
	LastSpawnedTimestampSeconds *uint64 `ic:"last_spawned_timestamp_seconds,omitempty" json:"last_spawned_timestamp_seconds,omitempty"`
}

type Tokens struct {
	E8s *uint64 `ic:"e8s,omitempty" json:"e8s,omitempty"`
}

type TransferSnsTreasuryFunds struct {
	FromTreasury int32                `ic:"from_treasury" json:"from_treasury"`
	ToPrincipal  *principal.Principal `ic:"to_principal,omitempty" json:"to_principal,omitempty"`
	ToSubaccount *Subaccount          `ic:"to_subaccount,omitempty" json:"to_subaccount,omitempty"`
	Memo         *uint64              `ic:"memo,omitempty" json:"memo,omitempty"`
	AmountE8s    uint64               `ic:"amount_e8s" json:"amount_e8s"`
}

type UpgradeInProgress struct {
	MarkFailedAtSeconds uint64   `ic:"mark_failed_at_seconds" json:"mark_failed_at_seconds"`
	CheckingUpgradeLock uint64   `ic:"checking_upgrade_lock" json:"checking_upgrade_lock"`
	ProposalId          *uint64  `ic:"proposal_id,omitempty" json:"proposal_id,omitempty"`
	TargetVersion       *Version `ic:"target_version,omitempty" json:"target_version,omitempty"`
}

type UpgradeJournal struct {
	Entries []UpgradeJournalEntry `ic:"entries" json:"entries"`
}

type UpgradeJournalEntry struct {
	Event *struct {
		UpgradeStepsRefreshed *UpgradeStepsRefreshed `ic:"UpgradeStepsRefreshed,variant"`
		UpgradeStepsReset     *UpgradeStepsReset     `ic:"UpgradeStepsReset,variant"`
		TargetVersionSet      *TargetVersionSet      `ic:"TargetVersionSet,variant"`
		TargetVersionReset    *TargetVersionReset    `ic:"TargetVersionReset,variant"`
		UpgradeStarted        *UpgradeStarted        `ic:"UpgradeStarted,variant"`
		UpgradeOutcome        *UpgradeOutcome        `ic:"UpgradeOutcome,variant"`
	} `ic:"event,omitempty" json:"event,omitempty"`
	TimestampSeconds *uint64 `ic:"timestamp_seconds,omitempty" json:"timestamp_seconds,omitempty"`
}

type UpgradeOutcome struct {
	HumanReadable *string `ic:"human_readable,omitempty" json:"human_readable,omitempty"`
	Status        *struct {
		Success *struct {
		} `ic:"Success,variant"`
		Timeout *struct {
		} `ic:"Timeout,variant"`
		InvalidState *struct {
			Version *Version `ic:"version,omitempty" json:"version,omitempty"`
		} `ic:"InvalidState,variant"`
		ExternalFailure *struct {
		} `ic:"ExternalFailure,variant"`
	} `ic:"status,omitempty" json:"status,omitempty"`
}

type UpgradeSnsControlledCanister struct {
	NewCanisterWasm    []byte               `ic:"new_canister_wasm" json:"new_canister_wasm"`
	Mode               *int32               `ic:"mode,omitempty" json:"mode,omitempty"`
	CanisterId         *principal.Principal `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
	CanisterUpgradeArg *[]byte              `ic:"canister_upgrade_arg,omitempty" json:"canister_upgrade_arg,omitempty"`
}

type UpgradeStarted struct {
	CurrentVersion  *Version `ic:"current_version,omitempty" json:"current_version,omitempty"`
	ExpectedVersion *Version `ic:"expected_version,omitempty" json:"expected_version,omitempty"`
	Reason          *struct {
		UpgradeSnsToNextVersionProposal *ProposalId `ic:"UpgradeSnsToNextVersionProposal,variant"`
		BehindTargetVersion             *struct {
		} `ic:"BehindTargetVersion,variant"`
	} `ic:"reason,omitempty" json:"reason,omitempty"`
}

type UpgradeStepsRefreshed struct {
	UpgradeSteps *Versions `ic:"upgrade_steps,omitempty" json:"upgrade_steps,omitempty"`
}

type UpgradeStepsReset struct {
	HumanReadable *string   `ic:"human_readable,omitempty" json:"human_readable,omitempty"`
	UpgradeSteps  *Versions `ic:"upgrade_steps,omitempty" json:"upgrade_steps,omitempty"`
}

type Valuation struct {
	Token            *int32            `ic:"token,omitempty" json:"token,omitempty"`
	Account          *Account          `ic:"account,omitempty" json:"account,omitempty"`
	ValuationFactors *ValuationFactors `ic:"valuation_factors,omitempty" json:"valuation_factors,omitempty"`
	TimestampSeconds *uint64           `ic:"timestamp_seconds,omitempty" json:"timestamp_seconds,omitempty"`
}

type ValuationFactors struct {
	XdrsPerIcp   *Decimal `ic:"xdrs_per_icp,omitempty" json:"xdrs_per_icp,omitempty"`
	IcpsPerToken *Decimal `ic:"icps_per_token,omitempty" json:"icps_per_token,omitempty"`
	Tokens       *Tokens  `ic:"tokens,omitempty" json:"tokens,omitempty"`
}

type Version struct {
	ArchiveWasmHash    []byte `ic:"archive_wasm_hash" json:"archive_wasm_hash"`
	RootWasmHash       []byte `ic:"root_wasm_hash" json:"root_wasm_hash"`
	SwapWasmHash       []byte `ic:"swap_wasm_hash" json:"swap_wasm_hash"`
	LedgerWasmHash     []byte `ic:"ledger_wasm_hash" json:"ledger_wasm_hash"`
	GovernanceWasmHash []byte `ic:"governance_wasm_hash" json:"governance_wasm_hash"`
	IndexWasmHash      []byte `ic:"index_wasm_hash" json:"index_wasm_hash"`
}

type Versions struct {
	Versions []Version `ic:"versions" json:"versions"`
}

type VotingRewardsParameters struct {
	FinalRewardRateBasisPoints          *uint64 `ic:"final_reward_rate_basis_points,omitempty" json:"final_reward_rate_basis_points,omitempty"`
	InitialRewardRateBasisPoints        *uint64 `ic:"initial_reward_rate_basis_points,omitempty" json:"initial_reward_rate_basis_points,omitempty"`
	RewardRateTransitionDurationSeconds *uint64 `ic:"reward_rate_transition_duration_seconds,omitempty" json:"reward_rate_transition_duration_seconds,omitempty"`
	RoundDurationSeconds                *uint64 `ic:"round_duration_seconds,omitempty" json:"round_duration_seconds,omitempty"`
}

type WaitForQuietState struct {
	CurrentDeadlineTimestampSeconds uint64 `ic:"current_deadline_timestamp_seconds" json:"current_deadline_timestamp_seconds"`
}
