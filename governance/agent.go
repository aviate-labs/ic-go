// Package governance provides a client for the "governance" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package governance

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/principal"
)

type AccountIdentifier struct {
	Hash []byte `ic:"hash" json:"hash"`
}

type Action struct {
	RegisterKnownNeuron           *KnownNeuron                   `ic:"RegisterKnownNeuron,variant" json:"RegisterKnownNeuron,omitempty"`
	ManageNeuron                  *ManageNeuron                  `ic:"ManageNeuron,variant" json:"ManageNeuron,omitempty"`
	UpdateCanisterSettings        *UpdateCanisterSettings        `ic:"UpdateCanisterSettings,variant" json:"UpdateCanisterSettings,omitempty"`
	InstallCode                   *InstallCode                   `ic:"InstallCode,variant" json:"InstallCode,omitempty"`
	StopOrStartCanister           *StopOrStartCanister           `ic:"StopOrStartCanister,variant" json:"StopOrStartCanister,omitempty"`
	CreateServiceNervousSystem    *CreateServiceNervousSystem    `ic:"CreateServiceNervousSystem,variant" json:"CreateServiceNervousSystem,omitempty"`
	ExecuteNnsFunction            *ExecuteNnsFunction            `ic:"ExecuteNnsFunction,variant" json:"ExecuteNnsFunction,omitempty"`
	RewardNodeProvider            *RewardNodeProvider            `ic:"RewardNodeProvider,variant" json:"RewardNodeProvider,omitempty"`
	OpenSnsTokenSwap              *OpenSnsTokenSwap              `ic:"OpenSnsTokenSwap,variant" json:"OpenSnsTokenSwap,omitempty"`
	SetSnsTokenSwapOpenTimeWindow *SetSnsTokenSwapOpenTimeWindow `ic:"SetSnsTokenSwapOpenTimeWindow,variant" json:"SetSnsTokenSwapOpenTimeWindow,omitempty"`
	SetDefaultFollowees           *SetDefaultFollowees           `ic:"SetDefaultFollowees,variant" json:"SetDefaultFollowees,omitempty"`
	RewardNodeProviders           *RewardNodeProviders           `ic:"RewardNodeProviders,variant" json:"RewardNodeProviders,omitempty"`
	ManageNetworkEconomics        *NetworkEconomics              `ic:"ManageNetworkEconomics,variant" json:"ManageNetworkEconomics,omitempty"`
	ApproveGenesisKyc             *Principals                    `ic:"ApproveGenesisKyc,variant" json:"ApproveGenesisKyc,omitempty"`
	AddOrRemoveNodeProvider       *AddOrRemoveNodeProvider       `ic:"AddOrRemoveNodeProvider,variant" json:"AddOrRemoveNodeProvider,omitempty"`
	Motion                        *Motion                        `ic:"Motion,variant" json:"Motion,omitempty"`
}

type AddHotKey struct {
	NewHotKey *principal.Principal `ic:"new_hot_key,omitempty" json:"new_hot_key,omitempty"`
}

type AddOrRemoveNodeProvider struct {
	Change *Change `ic:"change,omitempty" json:"change,omitempty"`
}

// Agent is a client for the "governance" canister.
type Agent struct {
	*agent.Agent
	CanisterId principal.Principal
}

// NewAgent creates a new agent for the "governance" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &Agent{
		Agent:      a,
		CanisterId: canisterId,
	}, nil
}

// ClaimGtcNeurons calls the "claim_gtc_neurons" method on the "governance" canister.
func (a Agent) ClaimGtcNeurons(arg0 principal.Principal, arg1 []NeuronId) (*Result, error) {
	var r0 Result
	if err := a.Agent.Call(
		a.CanisterId,
		"claim_gtc_neurons",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ClaimOrRefreshNeuronFromAccount calls the "claim_or_refresh_neuron_from_account" method on the "governance" canister.
func (a Agent) ClaimOrRefreshNeuronFromAccount(arg0 ClaimOrRefreshNeuronFromAccount) (*ClaimOrRefreshNeuronFromAccountResponse, error) {
	var r0 ClaimOrRefreshNeuronFromAccountResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"claim_or_refresh_neuron_from_account",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetBuildMetadata calls the "get_build_metadata" method on the "governance" canister.
func (a Agent) GetBuildMetadata() (*string, error) {
	var r0 string
	if err := a.Agent.Query(
		a.CanisterId,
		"get_build_metadata",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetFullNeuron calls the "get_full_neuron" method on the "governance" canister.
func (a Agent) GetFullNeuron(arg0 uint64) (*Result2, error) {
	var r0 Result2
	if err := a.Agent.Query(
		a.CanisterId,
		"get_full_neuron",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetFullNeuronByIdOrSubaccount calls the "get_full_neuron_by_id_or_subaccount" method on the "governance" canister.
func (a Agent) GetFullNeuronByIdOrSubaccount(arg0 NeuronIdOrSubaccount) (*Result2, error) {
	var r0 Result2
	if err := a.Agent.Query(
		a.CanisterId,
		"get_full_neuron_by_id_or_subaccount",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetLatestRewardEvent calls the "get_latest_reward_event" method on the "governance" canister.
func (a Agent) GetLatestRewardEvent() (*RewardEvent, error) {
	var r0 RewardEvent
	if err := a.Agent.Query(
		a.CanisterId,
		"get_latest_reward_event",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetMetrics calls the "get_metrics" method on the "governance" canister.
func (a Agent) GetMetrics() (*Result3, error) {
	var r0 Result3
	if err := a.Agent.Query(
		a.CanisterId,
		"get_metrics",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetMonthlyNodeProviderRewards calls the "get_monthly_node_provider_rewards" method on the "governance" canister.
func (a Agent) GetMonthlyNodeProviderRewards() (*Result4, error) {
	var r0 Result4
	if err := a.Agent.Call(
		a.CanisterId,
		"get_monthly_node_provider_rewards",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetMostRecentMonthlyNodeProviderRewards calls the "get_most_recent_monthly_node_provider_rewards" method on the "governance" canister.
func (a Agent) GetMostRecentMonthlyNodeProviderRewards() (**MonthlyNodeProviderRewards, error) {
	var r0 *MonthlyNodeProviderRewards
	if err := a.Agent.Query(
		a.CanisterId,
		"get_most_recent_monthly_node_provider_rewards",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNetworkEconomicsParameters calls the "get_network_economics_parameters" method on the "governance" canister.
func (a Agent) GetNetworkEconomicsParameters() (*NetworkEconomics, error) {
	var r0 NetworkEconomics
	if err := a.Agent.Query(
		a.CanisterId,
		"get_network_economics_parameters",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNeuronIds calls the "get_neuron_ids" method on the "governance" canister.
func (a Agent) GetNeuronIds() (*[]uint64, error) {
	var r0 []uint64
	if err := a.Agent.Query(
		a.CanisterId,
		"get_neuron_ids",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNeuronInfo calls the "get_neuron_info" method on the "governance" canister.
func (a Agent) GetNeuronInfo(arg0 uint64) (*Result5, error) {
	var r0 Result5
	if err := a.Agent.Query(
		a.CanisterId,
		"get_neuron_info",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNeuronInfoByIdOrSubaccount calls the "get_neuron_info_by_id_or_subaccount" method on the "governance" canister.
func (a Agent) GetNeuronInfoByIdOrSubaccount(arg0 NeuronIdOrSubaccount) (*Result5, error) {
	var r0 Result5
	if err := a.Agent.Query(
		a.CanisterId,
		"get_neuron_info_by_id_or_subaccount",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNeuronsFundAuditInfo calls the "get_neurons_fund_audit_info" method on the "governance" canister.
func (a Agent) GetNeuronsFundAuditInfo(arg0 GetNeuronsFundAuditInfoRequest) (*GetNeuronsFundAuditInfoResponse, error) {
	var r0 GetNeuronsFundAuditInfoResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_neurons_fund_audit_info",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNodeProviderByCaller calls the "get_node_provider_by_caller" method on the "governance" canister.
func (a Agent) GetNodeProviderByCaller(arg0 idl.Null) (*Result7, error) {
	var r0 Result7
	if err := a.Agent.Query(
		a.CanisterId,
		"get_node_provider_by_caller",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetPendingProposals calls the "get_pending_proposals" method on the "governance" canister.
func (a Agent) GetPendingProposals() (*[]ProposalInfo, error) {
	var r0 []ProposalInfo
	if err := a.Agent.Query(
		a.CanisterId,
		"get_pending_proposals",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetProposalInfo calls the "get_proposal_info" method on the "governance" canister.
func (a Agent) GetProposalInfo(arg0 uint64) (**ProposalInfo, error) {
	var r0 *ProposalInfo
	if err := a.Agent.Query(
		a.CanisterId,
		"get_proposal_info",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetRestoreAgingSummary calls the "get_restore_aging_summary" method on the "governance" canister.
func (a Agent) GetRestoreAgingSummary() (*RestoreAgingSummary, error) {
	var r0 RestoreAgingSummary
	if err := a.Agent.Query(
		a.CanisterId,
		"get_restore_aging_summary",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListKnownNeurons calls the "list_known_neurons" method on the "governance" canister.
func (a Agent) ListKnownNeurons() (*ListKnownNeuronsResponse, error) {
	var r0 ListKnownNeuronsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_known_neurons",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListNeurons calls the "list_neurons" method on the "governance" canister.
func (a Agent) ListNeurons(arg0 ListNeurons) (*ListNeuronsResponse, error) {
	var r0 ListNeuronsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_neurons",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListNodeProviderRewards calls the "list_node_provider_rewards" method on the "governance" canister.
func (a Agent) ListNodeProviderRewards(arg0 ListNodeProviderRewardsRequest) (*ListNodeProviderRewardsResponse, error) {
	var r0 ListNodeProviderRewardsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_node_provider_rewards",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListNodeProviders calls the "list_node_providers" method on the "governance" canister.
func (a Agent) ListNodeProviders() (*ListNodeProvidersResponse, error) {
	var r0 ListNodeProvidersResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_node_providers",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListProposals calls the "list_proposals" method on the "governance" canister.
func (a Agent) ListProposals(arg0 ListProposalInfo) (*ListProposalInfoResponse, error) {
	var r0 ListProposalInfoResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"list_proposals",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ManageNeuron calls the "manage_neuron" method on the "governance" canister.
func (a Agent) ManageNeuron(arg0 ManageNeuronRequest) (*ManageNeuronResponse, error) {
	var r0 ManageNeuronResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"manage_neuron",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SettleCommunityFundParticipation calls the "settle_community_fund_participation" method on the "governance" canister.
func (a Agent) SettleCommunityFundParticipation(arg0 SettleCommunityFundParticipation) (*Result, error) {
	var r0 Result
	if err := a.Agent.Call(
		a.CanisterId,
		"settle_community_fund_participation",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SettleNeuronsFundParticipation calls the "settle_neurons_fund_participation" method on the "governance" canister.
func (a Agent) SettleNeuronsFundParticipation(arg0 SettleNeuronsFundParticipationRequest) (*SettleNeuronsFundParticipationResponse, error) {
	var r0 SettleNeuronsFundParticipationResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"settle_neurons_fund_participation",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// SimulateManageNeuron calls the "simulate_manage_neuron" method on the "governance" canister.
func (a Agent) SimulateManageNeuron(arg0 ManageNeuronRequest) (*ManageNeuronResponse, error) {
	var r0 ManageNeuronResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"simulate_manage_neuron",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// TransferGtcNeuron calls the "transfer_gtc_neuron" method on the "governance" canister.
func (a Agent) TransferGtcNeuron(arg0 NeuronId, arg1 NeuronId) (*Result, error) {
	var r0 Result
	if err := a.Agent.Call(
		a.CanisterId,
		"transfer_gtc_neuron",
		[]any{arg0, arg1},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// UpdateNodeProvider calls the "update_node_provider" method on the "governance" canister.
func (a Agent) UpdateNodeProvider(arg0 UpdateNodeProvider) (*Result, error) {
	var r0 Result
	if err := a.Agent.Call(
		a.CanisterId,
		"update_node_provider",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

type Amount struct {
	E8s uint64 `ic:"e8s" json:"e8s"`
}

type ApproveGenesisKyc struct {
	Principals []principal.Principal `ic:"principals" json:"principals"`
}

type Ballot struct {
	Vote        int32  `ic:"vote" json:"vote"`
	VotingPower uint64 `ic:"voting_power" json:"voting_power"`
}

type BallotInfo struct {
	Vote       int32       `ic:"vote" json:"vote"`
	ProposalId *ProposalId `ic:"proposal_id,omitempty" json:"proposal_id,omitempty"`
}

type By struct {
	NeuronIdOrSubaccount *struct {
	} `ic:"NeuronIdOrSubaccount,variant" json:"NeuronIdOrSubaccount,omitempty"`
	MemoAndController *ClaimOrRefreshNeuronFromAccount `ic:"MemoAndController,variant" json:"MemoAndController,omitempty"`
	Memo              *uint64                          `ic:"Memo,variant" json:"Memo,omitempty"`
}

type Canister struct {
	Id *principal.Principal `ic:"id,omitempty" json:"id,omitempty"`
}

type CanisterSettings struct {
	FreezingThreshold   *uint64      `ic:"freezing_threshold,omitempty" json:"freezing_threshold,omitempty"`
	Controllers         *Controllers `ic:"controllers,omitempty" json:"controllers,omitempty"`
	LogVisibility       *int32       `ic:"log_visibility,omitempty" json:"log_visibility,omitempty"`
	WasmMemoryLimit     *uint64      `ic:"wasm_memory_limit,omitempty" json:"wasm_memory_limit,omitempty"`
	MemoryAllocation    *uint64      `ic:"memory_allocation,omitempty" json:"memory_allocation,omitempty"`
	ComputeAllocation   *uint64      `ic:"compute_allocation,omitempty" json:"compute_allocation,omitempty"`
	WasmMemoryThreshold *uint64      `ic:"wasm_memory_threshold,omitempty" json:"wasm_memory_threshold,omitempty"`
}

type CanisterStatusResultV2 struct {
	Status                 *int32                `ic:"status,omitempty" json:"status,omitempty"`
	FreezingThreshold      *uint64               `ic:"freezing_threshold,omitempty" json:"freezing_threshold,omitempty"`
	Controllers            []principal.Principal `ic:"controllers" json:"controllers"`
	MemorySize             *uint64               `ic:"memory_size,omitempty" json:"memory_size,omitempty"`
	Cycles                 *uint64               `ic:"cycles,omitempty" json:"cycles,omitempty"`
	IdleCyclesBurnedPerDay *uint64               `ic:"idle_cycles_burned_per_day,omitempty" json:"idle_cycles_burned_per_day,omitempty"`
	ModuleHash             []byte                `ic:"module_hash" json:"module_hash"`
}

type CanisterSummary struct {
	Status     *CanisterStatusResultV2 `ic:"status,omitempty" json:"status,omitempty"`
	CanisterId *principal.Principal    `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
}

type Change struct {
	ToRemove *NodeProvider `ic:"ToRemove,variant" json:"ToRemove,omitempty"`
	ToAdd    *NodeProvider `ic:"ToAdd,variant" json:"ToAdd,omitempty"`
}

type ChangeAutoStakeMaturity struct {
	RequestedSettingForAutoStakeMaturity bool `ic:"requested_setting_for_auto_stake_maturity" json:"requested_setting_for_auto_stake_maturity"`
}

type ClaimOrRefresh struct {
	By *By `ic:"by,omitempty" json:"by,omitempty"`
}

type ClaimOrRefreshNeuronFromAccount struct {
	Controller *principal.Principal `ic:"controller,omitempty" json:"controller,omitempty"`
	Memo       uint64               `ic:"memo" json:"memo"`
}

type ClaimOrRefreshNeuronFromAccountResponse struct {
	Result *Result1 `ic:"result,omitempty" json:"result,omitempty"`
}

type ClaimOrRefreshResponse struct {
	RefreshedNeuronId *NeuronId `ic:"refreshed_neuron_id,omitempty" json:"refreshed_neuron_id,omitempty"`
}

type Command struct {
	Spawn              *Spawn              `ic:"Spawn,variant" json:"Spawn,omitempty"`
	Split              *Split              `ic:"Split,variant" json:"Split,omitempty"`
	Follow             *Follow             `ic:"Follow,variant" json:"Follow,omitempty"`
	ClaimOrRefresh     *ClaimOrRefresh     `ic:"ClaimOrRefresh,variant" json:"ClaimOrRefresh,omitempty"`
	Configure          *Configure          `ic:"Configure,variant" json:"Configure,omitempty"`
	RegisterVote       *RegisterVote       `ic:"RegisterVote,variant" json:"RegisterVote,omitempty"`
	Merge              *Merge              `ic:"Merge,variant" json:"Merge,omitempty"`
	DisburseToNeuron   *DisburseToNeuron   `ic:"DisburseToNeuron,variant" json:"DisburseToNeuron,omitempty"`
	MakeProposal       *Proposal           `ic:"MakeProposal,variant" json:"MakeProposal,omitempty"`
	StakeMaturity      *StakeMaturity      `ic:"StakeMaturity,variant" json:"StakeMaturity,omitempty"`
	MergeMaturity      *MergeMaturity      `ic:"MergeMaturity,variant" json:"MergeMaturity,omitempty"`
	Disburse           *Disburse           `ic:"Disburse,variant" json:"Disburse,omitempty"`
	RefreshVotingPower *RefreshVotingPower `ic:"RefreshVotingPower,variant" json:"RefreshVotingPower,omitempty"`
}

type Command1 struct {
	Error  *GovernanceError `ic:"Error,variant" json:"Error,omitempty"`
	Spawn  *SpawnResponse   `ic:"Spawn,variant" json:"Spawn,omitempty"`
	Split  *SpawnResponse   `ic:"Split,variant" json:"Split,omitempty"`
	Follow *struct {
	} `ic:"Follow,variant" json:"Follow,omitempty"`
	ClaimOrRefresh *ClaimOrRefreshResponse `ic:"ClaimOrRefresh,variant" json:"ClaimOrRefresh,omitempty"`
	Configure      *struct {
	} `ic:"Configure,variant" json:"Configure,omitempty"`
	RegisterVote *struct {
	} `ic:"RegisterVote,variant" json:"RegisterVote,omitempty"`
	Merge              *MergeResponse              `ic:"Merge,variant" json:"Merge,omitempty"`
	DisburseToNeuron   *SpawnResponse              `ic:"DisburseToNeuron,variant" json:"DisburseToNeuron,omitempty"`
	MakeProposal       *MakeProposalResponse       `ic:"MakeProposal,variant" json:"MakeProposal,omitempty"`
	StakeMaturity      *StakeMaturityResponse      `ic:"StakeMaturity,variant" json:"StakeMaturity,omitempty"`
	MergeMaturity      *MergeMaturityResponse      `ic:"MergeMaturity,variant" json:"MergeMaturity,omitempty"`
	Disburse           *DisburseResponse           `ic:"Disburse,variant" json:"Disburse,omitempty"`
	RefreshVotingPower *RefreshVotingPowerResponse `ic:"RefreshVotingPower,variant" json:"RefreshVotingPower,omitempty"`
}

type Command2 struct {
	Spawn            *NeuronId         `ic:"Spawn,variant" json:"Spawn,omitempty"`
	Split            *Split            `ic:"Split,variant" json:"Split,omitempty"`
	Configure        *Configure        `ic:"Configure,variant" json:"Configure,omitempty"`
	Merge            *Merge            `ic:"Merge,variant" json:"Merge,omitempty"`
	DisburseToNeuron *DisburseToNeuron `ic:"DisburseToNeuron,variant" json:"DisburseToNeuron,omitempty"`
	SyncCommand      *struct {
	} `ic:"SyncCommand,variant" json:"SyncCommand,omitempty"`
	ClaimOrRefreshNeuron *ClaimOrRefresh `ic:"ClaimOrRefreshNeuron,variant" json:"ClaimOrRefreshNeuron,omitempty"`
	MergeMaturity        *MergeMaturity  `ic:"MergeMaturity,variant" json:"MergeMaturity,omitempty"`
	Disburse             *Disburse       `ic:"Disburse,variant" json:"Disburse,omitempty"`
}

type Committed struct {
	TotalDirectContributionIcpE8s      *uint64              `ic:"total_direct_contribution_icp_e8s,omitempty" json:"total_direct_contribution_icp_e8s,omitempty"`
	TotalNeuronsFundContributionIcpE8s *uint64              `ic:"total_neurons_fund_contribution_icp_e8s,omitempty" json:"total_neurons_fund_contribution_icp_e8s,omitempty"`
	SnsGovernanceCanisterId            *principal.Principal `ic:"sns_governance_canister_id,omitempty" json:"sns_governance_canister_id,omitempty"`
}

type Committed1 struct {
	TotalDirectParticipationIcpE8s      *uint64              `ic:"total_direct_participation_icp_e8s,omitempty" json:"total_direct_participation_icp_e8s,omitempty"`
	TotalNeuronsFundParticipationIcpE8s *uint64              `ic:"total_neurons_fund_participation_icp_e8s,omitempty" json:"total_neurons_fund_participation_icp_e8s,omitempty"`
	SnsGovernanceCanisterId             *principal.Principal `ic:"sns_governance_canister_id,omitempty" json:"sns_governance_canister_id,omitempty"`
}

type Configure struct {
	Operation *Operation `ic:"operation,omitempty" json:"operation,omitempty"`
}

type Controllers struct {
	Controllers []principal.Principal `ic:"controllers" json:"controllers"`
}

type Countries struct {
	IsoCodes []string `ic:"iso_codes" json:"iso_codes"`
}

type CreateServiceNervousSystem struct {
	Url                            *string                   `ic:"url,omitempty" json:"url,omitempty"`
	GovernanceParameters           *GovernanceParameters     `ic:"governance_parameters,omitempty" json:"governance_parameters,omitempty"`
	FallbackControllerPrincipalIds []principal.Principal     `ic:"fallback_controller_principal_ids" json:"fallback_controller_principal_ids"`
	Logo                           *Image                    `ic:"logo,omitempty" json:"logo,omitempty"`
	Name                           *string                   `ic:"name,omitempty" json:"name,omitempty"`
	LedgerParameters               *LedgerParameters         `ic:"ledger_parameters,omitempty" json:"ledger_parameters,omitempty"`
	Description                    *string                   `ic:"description,omitempty" json:"description,omitempty"`
	DappCanisters                  []Canister                `ic:"dapp_canisters" json:"dapp_canisters"`
	SwapParameters                 *SwapParameters           `ic:"swap_parameters,omitempty" json:"swap_parameters,omitempty"`
	InitialTokenDistribution       *InitialTokenDistribution `ic:"initial_token_distribution,omitempty" json:"initial_token_distribution,omitempty"`
}

type DateRangeFilter struct {
	StartTimestampSeconds *uint64 `ic:"start_timestamp_seconds,omitempty" json:"start_timestamp_seconds,omitempty"`
	EndTimestampSeconds   *uint64 `ic:"end_timestamp_seconds,omitempty" json:"end_timestamp_seconds,omitempty"`
}

type Decimal struct {
	HumanReadable *string `ic:"human_readable,omitempty" json:"human_readable,omitempty"`
}

type DerivedProposalInformation struct {
	SwapBackgroundInformation *SwapBackgroundInformation `ic:"swap_background_information,omitempty" json:"swap_background_information,omitempty"`
}

type DeveloperDistribution struct {
	DeveloperNeurons []NeuronDistribution `ic:"developer_neurons" json:"developer_neurons"`
}

type Disburse struct {
	ToAccount *AccountIdentifier `ic:"to_account,omitempty" json:"to_account,omitempty"`
	Amount    *Amount            `ic:"amount,omitempty" json:"amount,omitempty"`
}

type DisburseResponse struct {
	TransferBlockHeight uint64 `ic:"transfer_block_height" json:"transfer_block_height"`
}

type DisburseToNeuron struct {
	DissolveDelaySeconds uint64               `ic:"dissolve_delay_seconds" json:"dissolve_delay_seconds"`
	KycVerified          bool                 `ic:"kyc_verified" json:"kyc_verified"`
	AmountE8s            uint64               `ic:"amount_e8s" json:"amount_e8s"`
	NewController        *principal.Principal `ic:"new_controller,omitempty" json:"new_controller,omitempty"`
	Nonce                uint64               `ic:"nonce" json:"nonce"`
}

type DissolveState struct {
	DissolveDelaySeconds          *uint64 `ic:"DissolveDelaySeconds,variant" json:"DissolveDelaySeconds,omitempty"`
	WhenDissolvedTimestampSeconds *uint64 `ic:"WhenDissolvedTimestampSeconds,variant" json:"WhenDissolvedTimestampSeconds,omitempty"`
}

type Duration struct {
	Seconds *uint64 `ic:"seconds,omitempty" json:"seconds,omitempty"`
}

type ExecuteNnsFunction struct {
	NnsFunction int32  `ic:"nns_function" json:"nns_function"`
	Payload     []byte `ic:"payload" json:"payload"`
}

type Follow struct {
	Topic     int32      `ic:"topic" json:"topic"`
	Followees []NeuronId `ic:"followees" json:"followees"`
}

type Followees struct {
	Followees []NeuronId `ic:"followees" json:"followees"`
}

type Followers struct {
	Followers []NeuronId `ic:"followers" json:"followers"`
}

type FollowersMap struct {
	FollowersMap []struct {
		Field0 uint64    `ic:"0" json:"0"`
		Field1 Followers `ic:"1" json:"1"`
	} `ic:"followers_map" json:"followers_map"`
}

type GetNeuronsFundAuditInfoRequest struct {
	NnsProposalId *ProposalId `ic:"nns_proposal_id,omitempty" json:"nns_proposal_id,omitempty"`
}

type GetNeuronsFundAuditInfoResponse struct {
	Result *Result6 `ic:"result,omitempty" json:"result,omitempty"`
}

type GlobalTimeOfDay struct {
	SecondsAfterUtcMidnight *uint64 `ic:"seconds_after_utc_midnight,omitempty" json:"seconds_after_utc_midnight,omitempty"`
}

type Governance struct {
	DefaultFollowees []struct {
		Field0 int32     `ic:"0" json:"0"`
		Field1 Followees `ic:"1" json:"1"`
	} `ic:"default_followees" json:"default_followees"`
	MakingSnsProposal                               *MakingSnsProposal          `ic:"making_sns_proposal,omitempty" json:"making_sns_proposal,omitempty"`
	MostRecentMonthlyNodeProviderRewards            *MonthlyNodeProviderRewards `ic:"most_recent_monthly_node_provider_rewards,omitempty" json:"most_recent_monthly_node_provider_rewards,omitempty"`
	MaturityModulationLastUpdatedAtTimestampSeconds *uint64                     `ic:"maturity_modulation_last_updated_at_timestamp_seconds,omitempty" json:"maturity_modulation_last_updated_at_timestamp_seconds,omitempty"`
	WaitForQuietThresholdSeconds                    uint64                      `ic:"wait_for_quiet_threshold_seconds" json:"wait_for_quiet_threshold_seconds"`
	Metrics                                         *GovernanceCachedMetrics    `ic:"metrics,omitempty" json:"metrics,omitempty"`
	NeuronManagementVotingPeriodSeconds             *uint64                     `ic:"neuron_management_voting_period_seconds,omitempty" json:"neuron_management_voting_period_seconds,omitempty"`
	NodeProviders                                   []NodeProvider              `ic:"node_providers" json:"node_providers"`
	CachedDailyMaturityModulationBasisPoints        *int32                      `ic:"cached_daily_maturity_modulation_basis_points,omitempty" json:"cached_daily_maturity_modulation_basis_points,omitempty"`
	Economics                                       *NetworkEconomics           `ic:"economics,omitempty" json:"economics,omitempty"`
	RestoreAgingSummary                             *RestoreAgingSummary        `ic:"restore_aging_summary,omitempty" json:"restore_aging_summary,omitempty"`
	SpawningNeurons                                 *bool                       `ic:"spawning_neurons,omitempty" json:"spawning_neurons,omitempty"`
	LatestRewardEvent                               *RewardEvent                `ic:"latest_reward_event,omitempty" json:"latest_reward_event,omitempty"`
	ToClaimTransfers                                []NeuronStakeTransfer       `ic:"to_claim_transfers" json:"to_claim_transfers"`
	ShortVotingPeriodSeconds                        uint64                      `ic:"short_voting_period_seconds" json:"short_voting_period_seconds"`
	TopicFolloweeIndex                              []struct {
		Field0 int32        `ic:"0" json:"0"`
		Field1 FollowersMap `ic:"1" json:"1"`
	} `ic:"topic_followee_index" json:"topic_followee_index"`
	Migrations *Migrations `ic:"migrations,omitempty" json:"migrations,omitempty"`
	Proposals  []struct {
		Field0 uint64       `ic:"0" json:"0"`
		Field1 ProposalData `ic:"1" json:"1"`
	} `ic:"proposals" json:"proposals"`
	XdrConversionRate *XdrConversionRate `ic:"xdr_conversion_rate,omitempty" json:"xdr_conversion_rate,omitempty"`
	InFlightCommands  []struct {
		Field0 uint64                `ic:"0" json:"0"`
		Field1 NeuronInFlightCommand `ic:"1" json:"1"`
	} `ic:"in_flight_commands" json:"in_flight_commands"`
	Neurons []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 Neuron `ic:"1" json:"1"`
	} `ic:"neurons" json:"neurons"`
	GenesisTimestampSeconds uint64 `ic:"genesis_timestamp_seconds" json:"genesis_timestamp_seconds"`
}

type GovernanceCachedMetrics struct {
	TotalMaturityE8sEquivalent     uint64 `ic:"total_maturity_e8s_equivalent" json:"total_maturity_e8s_equivalent"`
	NotDissolvingNeuronsE8sBuckets []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"not_dissolving_neurons_e8s_buckets" json:"not_dissolving_neurons_e8s_buckets"`
	DissolvingNeuronsStakedMaturityE8sEquivalentSum     uint64 `ic:"dissolving_neurons_staked_maturity_e8s_equivalent_sum" json:"dissolving_neurons_staked_maturity_e8s_equivalent_sum"`
	GarbageCollectableNeuronsCount                      uint64 `ic:"garbage_collectable_neurons_count" json:"garbage_collectable_neurons_count"`
	DissolvingNeuronsStakedMaturityE8sEquivalentBuckets []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"dissolving_neurons_staked_maturity_e8s_equivalent_buckets" json:"dissolving_neurons_staked_maturity_e8s_equivalent_buckets"`
	NeuronsWithInvalidStakeCount     uint64 `ic:"neurons_with_invalid_stake_count" json:"neurons_with_invalid_stake_count"`
	NotDissolvingNeuronsCountBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"not_dissolving_neurons_count_buckets" json:"not_dissolving_neurons_count_buckets"`
	EctNeuronCount                                  uint64  `ic:"ect_neuron_count" json:"ect_neuron_count"`
	TotalSupplyIcp                                  uint64  `ic:"total_supply_icp" json:"total_supply_icp"`
	NeuronsWithLessThan6MonthsDissolveDelayCount    uint64  `ic:"neurons_with_less_than_6_months_dissolve_delay_count" json:"neurons_with_less_than_6_months_dissolve_delay_count"`
	DissolvedNeuronsCount                           uint64  `ic:"dissolved_neurons_count" json:"dissolved_neurons_count"`
	CommunityFundTotalMaturityE8sEquivalent         uint64  `ic:"community_fund_total_maturity_e8s_equivalent" json:"community_fund_total_maturity_e8s_equivalent"`
	TotalStakedE8sSeed                              uint64  `ic:"total_staked_e8s_seed" json:"total_staked_e8s_seed"`
	TotalStakedMaturityE8sEquivalentEct             uint64  `ic:"total_staked_maturity_e8s_equivalent_ect" json:"total_staked_maturity_e8s_equivalent_ect"`
	TotalStakedE8s                                  uint64  `ic:"total_staked_e8s" json:"total_staked_e8s"`
	NotDissolvingNeuronsCount                       uint64  `ic:"not_dissolving_neurons_count" json:"not_dissolving_neurons_count"`
	TotalLockedE8s                                  uint64  `ic:"total_locked_e8s" json:"total_locked_e8s"`
	NeuronsFundTotalActiveNeurons                   uint64  `ic:"neurons_fund_total_active_neurons" json:"neurons_fund_total_active_neurons"`
	TotalVotingPowerNonSelfAuthenticatingController *uint64 `ic:"total_voting_power_non_self_authenticating_controller,omitempty" json:"total_voting_power_non_self_authenticating_controller,omitempty"`
	TotalStakedMaturityE8sEquivalent                uint64  `ic:"total_staked_maturity_e8s_equivalent" json:"total_staked_maturity_e8s_equivalent"`
	NotDissolvingNeuronsE8sBucketsEct               []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"not_dissolving_neurons_e8s_buckets_ect" json:"not_dissolving_neurons_e8s_buckets_ect"`
	TotalStakedE8sEct                                  uint64  `ic:"total_staked_e8s_ect" json:"total_staked_e8s_ect"`
	NotDissolvingNeuronsStakedMaturityE8sEquivalentSum uint64  `ic:"not_dissolving_neurons_staked_maturity_e8s_equivalent_sum" json:"not_dissolving_neurons_staked_maturity_e8s_equivalent_sum"`
	DissolvedNeuronsE8s                                uint64  `ic:"dissolved_neurons_e8s" json:"dissolved_neurons_e8s"`
	TotalStakedE8sNonSelfAuthenticatingController      *uint64 `ic:"total_staked_e8s_non_self_authenticating_controller,omitempty" json:"total_staked_e8s_non_self_authenticating_controller,omitempty"`
	DissolvingNeuronsE8sBucketsSeed                    []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"dissolving_neurons_e8s_buckets_seed" json:"dissolving_neurons_e8s_buckets_seed"`
	NeuronsWithLessThan6MonthsDissolveDelayE8s             uint64 `ic:"neurons_with_less_than_6_months_dissolve_delay_e8s" json:"neurons_with_less_than_6_months_dissolve_delay_e8s"`
	NotDissolvingNeuronsStakedMaturityE8sEquivalentBuckets []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets" json:"not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets"`
	DissolvingNeuronsCountBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"dissolving_neurons_count_buckets" json:"dissolving_neurons_count_buckets"`
	DissolvingNeuronsE8sBucketsEct []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"dissolving_neurons_e8s_buckets_ect" json:"dissolving_neurons_e8s_buckets_ect"`
	DissolvingNeuronsCount      uint64 `ic:"dissolving_neurons_count" json:"dissolving_neurons_count"`
	DissolvingNeuronsE8sBuckets []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"dissolving_neurons_e8s_buckets" json:"dissolving_neurons_e8s_buckets"`
	TotalStakedMaturityE8sEquivalentSeed uint64 `ic:"total_staked_maturity_e8s_equivalent_seed" json:"total_staked_maturity_e8s_equivalent_seed"`
	CommunityFundTotalStakedE8s          uint64 `ic:"community_fund_total_staked_e8s" json:"community_fund_total_staked_e8s"`
	NotDissolvingNeuronsE8sBucketsSeed   []struct {
		Field0 uint64  `ic:"0" json:"0"`
		Field1 float64 `ic:"1" json:"1"`
	} `ic:"not_dissolving_neurons_e8s_buckets_seed" json:"not_dissolving_neurons_e8s_buckets_seed"`
	TimestampSeconds                                   uint64               `ic:"timestamp_seconds" json:"timestamp_seconds"`
	SeedNeuronCount                                    uint64               `ic:"seed_neuron_count" json:"seed_neuron_count"`
	NonSelfAuthenticatingControllerNeuronSubsetMetrics *NeuronSubsetMetrics `ic:"non_self_authenticating_controller_neuron_subset_metrics,omitempty" json:"non_self_authenticating_controller_neuron_subset_metrics,omitempty"`
	PublicNeuronSubsetMetrics                          *NeuronSubsetMetrics `ic:"public_neuron_subset_metrics,omitempty" json:"public_neuron_subset_metrics,omitempty"`
	DecliningVotingPowerNeuronSubsetMetrics            *NeuronSubsetMetrics `ic:"declining_voting_power_neuron_subset_metrics,omitempty" json:"declining_voting_power_neuron_subset_metrics,omitempty"`
	FullyLostVotingPowerNeuronSubsetMetrics            *NeuronSubsetMetrics `ic:"fully_lost_voting_power_neuron_subset_metrics,omitempty" json:"fully_lost_voting_power_neuron_subset_metrics,omitempty"`
}

type GovernanceError struct {
	ErrorMessage string `ic:"error_message" json:"error_message"`
	ErrorType    int32  `ic:"error_type" json:"error_type"`
}

type GovernanceParameters struct {
	NeuronMaximumDissolveDelayBonus      *Percentage             `ic:"neuron_maximum_dissolve_delay_bonus,omitempty" json:"neuron_maximum_dissolve_delay_bonus,omitempty"`
	NeuronMaximumAgeForAgeBonus          *Duration               `ic:"neuron_maximum_age_for_age_bonus,omitempty" json:"neuron_maximum_age_for_age_bonus,omitempty"`
	NeuronMaximumDissolveDelay           *Duration               `ic:"neuron_maximum_dissolve_delay,omitempty" json:"neuron_maximum_dissolve_delay,omitempty"`
	NeuronMinimumDissolveDelayToVote     *Duration               `ic:"neuron_minimum_dissolve_delay_to_vote,omitempty" json:"neuron_minimum_dissolve_delay_to_vote,omitempty"`
	NeuronMaximumAgeBonus                *Percentage             `ic:"neuron_maximum_age_bonus,omitempty" json:"neuron_maximum_age_bonus,omitempty"`
	NeuronMinimumStake                   *Tokens                 `ic:"neuron_minimum_stake,omitempty" json:"neuron_minimum_stake,omitempty"`
	ProposalWaitForQuietDeadlineIncrease *Duration               `ic:"proposal_wait_for_quiet_deadline_increase,omitempty" json:"proposal_wait_for_quiet_deadline_increase,omitempty"`
	ProposalInitialVotingPeriod          *Duration               `ic:"proposal_initial_voting_period,omitempty" json:"proposal_initial_voting_period,omitempty"`
	ProposalRejectionFee                 *Tokens                 `ic:"proposal_rejection_fee,omitempty" json:"proposal_rejection_fee,omitempty"`
	VotingRewardParameters               *VotingRewardParameters `ic:"voting_reward_parameters,omitempty" json:"voting_reward_parameters,omitempty"`
}

type IdealMatchedParticipationFunction struct {
	SerializedRepresentation *string `ic:"serialized_representation,omitempty" json:"serialized_representation,omitempty"`
}

type Image struct {
	Base64Encoding *string `ic:"base64_encoding,omitempty" json:"base64_encoding,omitempty"`
}

type IncreaseDissolveDelay struct {
	AdditionalDissolveDelaySeconds uint32 `ic:"additional_dissolve_delay_seconds" json:"additional_dissolve_delay_seconds"`
}

type InitialTokenDistribution struct {
	TreasuryDistribution  *SwapDistribution      `ic:"treasury_distribution,omitempty" json:"treasury_distribution,omitempty"`
	DeveloperDistribution *DeveloperDistribution `ic:"developer_distribution,omitempty" json:"developer_distribution,omitempty"`
	SwapDistribution      *SwapDistribution      `ic:"swap_distribution,omitempty" json:"swap_distribution,omitempty"`
}

type InstallCode struct {
	SkipStoppingBeforeInstalling *bool                `ic:"skip_stopping_before_installing,omitempty" json:"skip_stopping_before_installing,omitempty"`
	WasmModuleHash               *[]byte              `ic:"wasm_module_hash,omitempty" json:"wasm_module_hash,omitempty"`
	CanisterId                   *principal.Principal `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
	ArgHash                      *[]byte              `ic:"arg_hash,omitempty" json:"arg_hash,omitempty"`
	InstallMode                  *int32               `ic:"install_mode,omitempty" json:"install_mode,omitempty"`
}

type InstallCodeRequest struct {
	Arg                          *[]byte              `ic:"arg,omitempty" json:"arg,omitempty"`
	WasmModule                   *[]byte              `ic:"wasm_module,omitempty" json:"wasm_module,omitempty"`
	SkipStoppingBeforeInstalling *bool                `ic:"skip_stopping_before_installing,omitempty" json:"skip_stopping_before_installing,omitempty"`
	CanisterId                   *principal.Principal `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
	InstallMode                  *int32               `ic:"install_mode,omitempty" json:"install_mode,omitempty"`
}

type KnownNeuron struct {
	Id              *NeuronId        `ic:"id,omitempty" json:"id,omitempty"`
	KnownNeuronData *KnownNeuronData `ic:"known_neuron_data,omitempty" json:"known_neuron_data,omitempty"`
}

type KnownNeuronData struct {
	Name        string  `ic:"name" json:"name"`
	Description *string `ic:"description,omitempty" json:"description,omitempty"`
}

type LedgerParameters struct {
	TransactionFee *Tokens `ic:"transaction_fee,omitempty" json:"transaction_fee,omitempty"`
	TokenSymbol    *string `ic:"token_symbol,omitempty" json:"token_symbol,omitempty"`
	TokenLogo      *Image  `ic:"token_logo,omitempty" json:"token_logo,omitempty"`
	TokenName      *string `ic:"token_name,omitempty" json:"token_name,omitempty"`
}

type ListKnownNeuronsResponse struct {
	KnownNeurons []KnownNeuron `ic:"known_neurons" json:"known_neurons"`
}

type ListNeurons struct {
	NeuronIds                           []uint64            `ic:"neuron_ids" json:"neuron_ids"`
	IncludeNeuronsReadableByCaller      bool                `ic:"include_neurons_readable_by_caller" json:"include_neurons_readable_by_caller"`
	IncludeEmptyNeuronsReadableByCaller *bool               `ic:"include_empty_neurons_readable_by_caller,omitempty" json:"include_empty_neurons_readable_by_caller,omitempty"`
	IncludePublicNeuronsInFullNeurons   *bool               `ic:"include_public_neurons_in_full_neurons,omitempty" json:"include_public_neurons_in_full_neurons,omitempty"`
	PageNumber                          *uint64             `ic:"page_number,omitempty" json:"page_number,omitempty"`
	PageSize                            *uint64             `ic:"page_size,omitempty" json:"page_size,omitempty"`
	NeuronSubaccounts                   *[]NeuronSubaccount `ic:"neuron_subaccounts,omitempty" json:"neuron_subaccounts,omitempty"`
}

type ListNeuronsResponse struct {
	NeuronInfos []struct {
		Field0 uint64     `ic:"0" json:"0"`
		Field1 NeuronInfo `ic:"1" json:"1"`
	} `ic:"neuron_infos" json:"neuron_infos"`
	FullNeurons         []Neuron `ic:"full_neurons" json:"full_neurons"`
	TotalPagesAvailable *uint64  `ic:"total_pages_available,omitempty" json:"total_pages_available,omitempty"`
}

type ListNodeProviderRewardsRequest struct {
	DateFilter *DateRangeFilter `ic:"date_filter,omitempty" json:"date_filter,omitempty"`
}

type ListNodeProviderRewardsResponse struct {
	Rewards []MonthlyNodeProviderRewards `ic:"rewards" json:"rewards"`
}

type ListNodeProvidersResponse struct {
	NodeProviders []NodeProvider `ic:"node_providers" json:"node_providers"`
}

type ListProposalInfo struct {
	IncludeRewardStatus             []int32     `ic:"include_reward_status" json:"include_reward_status"`
	OmitLargeFields                 *bool       `ic:"omit_large_fields,omitempty" json:"omit_large_fields,omitempty"`
	BeforeProposal                  *ProposalId `ic:"before_proposal,omitempty" json:"before_proposal,omitempty"`
	Limit                           uint32      `ic:"limit" json:"limit"`
	ExcludeTopic                    []int32     `ic:"exclude_topic" json:"exclude_topic"`
	IncludeAllManageNeuronProposals *bool       `ic:"include_all_manage_neuron_proposals,omitempty" json:"include_all_manage_neuron_proposals,omitempty"`
	IncludeStatus                   []int32     `ic:"include_status" json:"include_status"`
}

type ListProposalInfoResponse struct {
	ProposalInfo []ProposalInfo `ic:"proposal_info" json:"proposal_info"`
}

type MakeProposalRequest struct {
	Url     string                 `ic:"url" json:"url"`
	Title   *string                `ic:"title,omitempty" json:"title,omitempty"`
	Action  *ProposalActionRequest `ic:"action,omitempty" json:"action,omitempty"`
	Summary string                 `ic:"summary" json:"summary"`
}

type MakeProposalResponse struct {
	Message    *string     `ic:"message,omitempty" json:"message,omitempty"`
	ProposalId *ProposalId `ic:"proposal_id,omitempty" json:"proposal_id,omitempty"`
}

type MakingSnsProposal struct {
	Proposal   *Proposal            `ic:"proposal,omitempty" json:"proposal,omitempty"`
	Caller     *principal.Principal `ic:"caller,omitempty" json:"caller,omitempty"`
	ProposerId *NeuronId            `ic:"proposer_id,omitempty" json:"proposer_id,omitempty"`
}

type ManageNeuron struct {
	Id                   *NeuronId             `ic:"id,omitempty" json:"id,omitempty"`
	Command              *Command              `ic:"command,omitempty" json:"command,omitempty"`
	NeuronIdOrSubaccount *NeuronIdOrSubaccount `ic:"neuron_id_or_subaccount,omitempty" json:"neuron_id_or_subaccount,omitempty"`
}

type ManageNeuronCommandRequest struct {
	Spawn              *Spawn               `ic:"Spawn,variant" json:"Spawn,omitempty"`
	Split              *Split               `ic:"Split,variant" json:"Split,omitempty"`
	Follow             *Follow              `ic:"Follow,variant" json:"Follow,omitempty"`
	ClaimOrRefresh     *ClaimOrRefresh      `ic:"ClaimOrRefresh,variant" json:"ClaimOrRefresh,omitempty"`
	Configure          *Configure           `ic:"Configure,variant" json:"Configure,omitempty"`
	RegisterVote       *RegisterVote        `ic:"RegisterVote,variant" json:"RegisterVote,omitempty"`
	Merge              *Merge               `ic:"Merge,variant" json:"Merge,omitempty"`
	DisburseToNeuron   *DisburseToNeuron    `ic:"DisburseToNeuron,variant" json:"DisburseToNeuron,omitempty"`
	MakeProposal       *MakeProposalRequest `ic:"MakeProposal,variant" json:"MakeProposal,omitempty"`
	StakeMaturity      *StakeMaturity       `ic:"StakeMaturity,variant" json:"StakeMaturity,omitempty"`
	MergeMaturity      *MergeMaturity       `ic:"MergeMaturity,variant" json:"MergeMaturity,omitempty"`
	Disburse           *Disburse            `ic:"Disburse,variant" json:"Disburse,omitempty"`
	RefreshVotingPower *RefreshVotingPower  `ic:"RefreshVotingPower,variant" json:"RefreshVotingPower,omitempty"`
}

type ManageNeuronRequest struct {
	NeuronIdOrSubaccount *NeuronIdOrSubaccount       `ic:"neuron_id_or_subaccount,omitempty" json:"neuron_id_or_subaccount,omitempty"`
	Command              *ManageNeuronCommandRequest `ic:"command,omitempty" json:"command,omitempty"`
	Id                   *NeuronId                   `ic:"id,omitempty" json:"id,omitempty"`
}

type ManageNeuronResponse struct {
	Command *Command1 `ic:"command,omitempty" json:"command,omitempty"`
}

type Merge struct {
	SourceNeuronId *NeuronId `ic:"source_neuron_id,omitempty" json:"source_neuron_id,omitempty"`
}

type MergeMaturity struct {
	PercentageToMerge uint32 `ic:"percentage_to_merge" json:"percentage_to_merge"`
}

type MergeMaturityResponse struct {
	MergedMaturityE8s uint64 `ic:"merged_maturity_e8s" json:"merged_maturity_e8s"`
	NewStakeE8s       uint64 `ic:"new_stake_e8s" json:"new_stake_e8s"`
}

type MergeResponse struct {
	TargetNeuron     *Neuron     `ic:"target_neuron,omitempty" json:"target_neuron,omitempty"`
	SourceNeuron     *Neuron     `ic:"source_neuron,omitempty" json:"source_neuron,omitempty"`
	TargetNeuronInfo *NeuronInfo `ic:"target_neuron_info,omitempty" json:"target_neuron_info,omitempty"`
	SourceNeuronInfo *NeuronInfo `ic:"source_neuron_info,omitempty" json:"source_neuron_info,omitempty"`
}

type Migration struct {
	Status        *int32    `ic:"status,omitempty" json:"status,omitempty"`
	FailureReason *string   `ic:"failure_reason,omitempty" json:"failure_reason,omitempty"`
	Progress      *Progress `ic:"progress,omitempty" json:"progress,omitempty"`
}

type Migrations struct {
	NeuronIndexesMigration                     *Migration `ic:"neuron_indexes_migration,omitempty" json:"neuron_indexes_migration,omitempty"`
	CopyInactiveNeuronsToStableMemoryMigration *Migration `ic:"copy_inactive_neurons_to_stable_memory_migration,omitempty" json:"copy_inactive_neurons_to_stable_memory_migration,omitempty"`
}

type MonthlyNodeProviderRewards struct {
	MinimumXdrPermyriadPerIcp     *uint64              `ic:"minimum_xdr_permyriad_per_icp,omitempty" json:"minimum_xdr_permyriad_per_icp,omitempty"`
	RegistryVersion               *uint64              `ic:"registry_version,omitempty" json:"registry_version,omitempty"`
	NodeProviders                 []NodeProvider       `ic:"node_providers" json:"node_providers"`
	Timestamp                     uint64               `ic:"timestamp" json:"timestamp"`
	Rewards                       []RewardNodeProvider `ic:"rewards" json:"rewards"`
	XdrConversionRate             *XdrConversionRate   `ic:"xdr_conversion_rate,omitempty" json:"xdr_conversion_rate,omitempty"`
	MaximumNodeProviderRewardsE8s *uint64              `ic:"maximum_node_provider_rewards_e8s,omitempty" json:"maximum_node_provider_rewards_e8s,omitempty"`
}

type Motion struct {
	MotionText string `ic:"motion_text" json:"motion_text"`
}

type NetworkEconomics struct {
	NeuronMinimumStakeE8s             uint64                `ic:"neuron_minimum_stake_e8s" json:"neuron_minimum_stake_e8s"`
	MaxProposalsToKeepPerTopic        uint32                `ic:"max_proposals_to_keep_per_topic" json:"max_proposals_to_keep_per_topic"`
	NeuronManagementFeePerProposalE8s uint64                `ic:"neuron_management_fee_per_proposal_e8s" json:"neuron_management_fee_per_proposal_e8s"`
	RejectCostE8s                     uint64                `ic:"reject_cost_e8s" json:"reject_cost_e8s"`
	TransactionFeeE8s                 uint64                `ic:"transaction_fee_e8s" json:"transaction_fee_e8s"`
	NeuronSpawnDissolveDelaySeconds   uint64                `ic:"neuron_spawn_dissolve_delay_seconds" json:"neuron_spawn_dissolve_delay_seconds"`
	MinimumIcpXdrRate                 uint64                `ic:"minimum_icp_xdr_rate" json:"minimum_icp_xdr_rate"`
	MaximumNodeProviderRewardsE8s     uint64                `ic:"maximum_node_provider_rewards_e8s" json:"maximum_node_provider_rewards_e8s"`
	NeuronsFundEconomics              *NeuronsFundEconomics `ic:"neurons_fund_economics,omitempty" json:"neurons_fund_economics,omitempty"`
	VotingPowerEconomics              *VotingPowerEconomics `ic:"voting_power_economics,omitempty" json:"voting_power_economics,omitempty"`
}

type Neuron struct {
	Id                                  *NeuronId             `ic:"id,omitempty" json:"id,omitempty"`
	StakedMaturityE8sEquivalent         *uint64               `ic:"staked_maturity_e8s_equivalent,omitempty" json:"staked_maturity_e8s_equivalent,omitempty"`
	Controller                          *principal.Principal  `ic:"controller,omitempty" json:"controller,omitempty"`
	RecentBallots                       []BallotInfo          `ic:"recent_ballots" json:"recent_ballots"`
	KycVerified                         bool                  `ic:"kyc_verified" json:"kyc_verified"`
	NeuronType                          *int32                `ic:"neuron_type,omitempty" json:"neuron_type,omitempty"`
	NotForProfit                        bool                  `ic:"not_for_profit" json:"not_for_profit"`
	MaturityE8sEquivalent               uint64                `ic:"maturity_e8s_equivalent" json:"maturity_e8s_equivalent"`
	CachedNeuronStakeE8s                uint64                `ic:"cached_neuron_stake_e8s" json:"cached_neuron_stake_e8s"`
	CreatedTimestampSeconds             uint64                `ic:"created_timestamp_seconds" json:"created_timestamp_seconds"`
	AutoStakeMaturity                   *bool                 `ic:"auto_stake_maturity,omitempty" json:"auto_stake_maturity,omitempty"`
	AgingSinceTimestampSeconds          uint64                `ic:"aging_since_timestamp_seconds" json:"aging_since_timestamp_seconds"`
	HotKeys                             []principal.Principal `ic:"hot_keys" json:"hot_keys"`
	Account                             []byte                `ic:"account" json:"account"`
	JoinedCommunityFundTimestampSeconds *uint64               `ic:"joined_community_fund_timestamp_seconds,omitempty" json:"joined_community_fund_timestamp_seconds,omitempty"`
	DissolveState                       *DissolveState        `ic:"dissolve_state,omitempty" json:"dissolve_state,omitempty"`
	Followees                           []struct {
		Field0 int32     `ic:"0" json:"0"`
		Field1 Followees `ic:"1" json:"1"`
	} `ic:"followees" json:"followees"`
	NeuronFeesE8s                        uint64               `ic:"neuron_fees_e8s" json:"neuron_fees_e8s"`
	Visibility                           *int32               `ic:"visibility,omitempty" json:"visibility,omitempty"`
	Transfer                             *NeuronStakeTransfer `ic:"transfer,omitempty" json:"transfer,omitempty"`
	KnownNeuronData                      *KnownNeuronData     `ic:"known_neuron_data,omitempty" json:"known_neuron_data,omitempty"`
	SpawnAtTimestampSeconds              *uint64              `ic:"spawn_at_timestamp_seconds,omitempty" json:"spawn_at_timestamp_seconds,omitempty"`
	VotingPowerRefreshedTimestampSeconds *uint64              `ic:"voting_power_refreshed_timestamp_seconds,omitempty" json:"voting_power_refreshed_timestamp_seconds,omitempty"`
	DecidingVotingPower                  *uint64              `ic:"deciding_voting_power,omitempty" json:"deciding_voting_power,omitempty"`
	PotentialVotingPower                 *uint64              `ic:"potential_voting_power,omitempty" json:"potential_voting_power,omitempty"`
}

type NeuronBasketConstructionParameters struct {
	DissolveDelayInterval *Duration `ic:"dissolve_delay_interval,omitempty" json:"dissolve_delay_interval,omitempty"`
	Count                 *uint64   `ic:"count,omitempty" json:"count,omitempty"`
}

type NeuronBasketConstructionParameters1 struct {
	DissolveDelayIntervalSeconds uint64 `ic:"dissolve_delay_interval_seconds" json:"dissolve_delay_interval_seconds"`
	Count                        uint64 `ic:"count" json:"count"`
}

type NeuronDistribution struct {
	Controller    *principal.Principal `ic:"controller,omitempty" json:"controller,omitempty"`
	DissolveDelay *Duration            `ic:"dissolve_delay,omitempty" json:"dissolve_delay,omitempty"`
	Memo          *uint64              `ic:"memo,omitempty" json:"memo,omitempty"`
	VestingPeriod *Duration            `ic:"vesting_period,omitempty" json:"vesting_period,omitempty"`
	Stake         *Tokens              `ic:"stake,omitempty" json:"stake,omitempty"`
}

type NeuronId struct {
	Id uint64 `ic:"id" json:"id"`
}

type NeuronIdOrSubaccount struct {
	Subaccount *[]byte   `ic:"Subaccount,variant" json:"Subaccount,omitempty"`
	NeuronId   *NeuronId `ic:"NeuronId,variant" json:"NeuronId,omitempty"`
}

type NeuronInFlightCommand struct {
	Command   *Command2 `ic:"command,omitempty" json:"command,omitempty"`
	Timestamp uint64    `ic:"timestamp" json:"timestamp"`
}

type NeuronInfo struct {
	DissolveDelaySeconds                 uint64           `ic:"dissolve_delay_seconds" json:"dissolve_delay_seconds"`
	RecentBallots                        []BallotInfo     `ic:"recent_ballots" json:"recent_ballots"`
	NeuronType                           *int32           `ic:"neuron_type,omitempty" json:"neuron_type,omitempty"`
	CreatedTimestampSeconds              uint64           `ic:"created_timestamp_seconds" json:"created_timestamp_seconds"`
	State                                int32            `ic:"state" json:"state"`
	StakeE8s                             uint64           `ic:"stake_e8s" json:"stake_e8s"`
	JoinedCommunityFundTimestampSeconds  *uint64          `ic:"joined_community_fund_timestamp_seconds,omitempty" json:"joined_community_fund_timestamp_seconds,omitempty"`
	RetrievedAtTimestampSeconds          uint64           `ic:"retrieved_at_timestamp_seconds" json:"retrieved_at_timestamp_seconds"`
	Visibility                           *int32           `ic:"visibility,omitempty" json:"visibility,omitempty"`
	KnownNeuronData                      *KnownNeuronData `ic:"known_neuron_data,omitempty" json:"known_neuron_data,omitempty"`
	AgeSeconds                           uint64           `ic:"age_seconds" json:"age_seconds"`
	VotingPower                          uint64           `ic:"voting_power" json:"voting_power"`
	VotingPowerRefreshedTimestampSeconds *uint64          `ic:"voting_power_refreshed_timestamp_seconds,omitempty" json:"voting_power_refreshed_timestamp_seconds,omitempty"`
	DecidingVotingPower                  *uint64          `ic:"deciding_voting_power,omitempty" json:"deciding_voting_power,omitempty"`
	PotentialVotingPower                 *uint64          `ic:"potential_voting_power,omitempty" json:"potential_voting_power,omitempty"`
}

type NeuronStakeTransfer struct {
	ToSubaccount      []byte               `ic:"to_subaccount" json:"to_subaccount"`
	NeuronStakeE8s    uint64               `ic:"neuron_stake_e8s" json:"neuron_stake_e8s"`
	From              *principal.Principal `ic:"from,omitempty" json:"from,omitempty"`
	Memo              uint64               `ic:"memo" json:"memo"`
	FromSubaccount    []byte               `ic:"from_subaccount" json:"from_subaccount"`
	TransferTimestamp uint64               `ic:"transfer_timestamp" json:"transfer_timestamp"`
	BlockHeight       uint64               `ic:"block_height" json:"block_height"`
}

type NeuronSubaccount struct {
	Subaccount []byte `ic:"subaccount" json:"subaccount"`
}

type NeuronSubsetMetrics struct {
	Count                            *uint64 `ic:"count,omitempty" json:"count,omitempty"`
	TotalStakedE8s                   *uint64 `ic:"total_staked_e8s,omitempty" json:"total_staked_e8s,omitempty"`
	TotalMaturityE8sEquivalent       *uint64 `ic:"total_maturity_e8s_equivalent,omitempty" json:"total_maturity_e8s_equivalent,omitempty"`
	TotalStakedMaturityE8sEquivalent *uint64 `ic:"total_staked_maturity_e8s_equivalent,omitempty" json:"total_staked_maturity_e8s_equivalent,omitempty"`
	TotalVotingPower                 *uint64 `ic:"total_voting_power,omitempty" json:"total_voting_power,omitempty"`
	TotalDecidingVotingPower         *uint64 `ic:"total_deciding_voting_power,omitempty" json:"total_deciding_voting_power,omitempty"`
	TotalPotentialVotingPower        *uint64 `ic:"total_potential_voting_power,omitempty" json:"total_potential_voting_power,omitempty"`
	CountBuckets                     []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"count_buckets" json:"count_buckets"`
	StakedE8sBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"staked_e8s_buckets" json:"staked_e8s_buckets"`
	MaturityE8sEquivalentBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"maturity_e8s_equivalent_buckets" json:"maturity_e8s_equivalent_buckets"`
	StakedMaturityE8sEquivalentBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"staked_maturity_e8s_equivalent_buckets" json:"staked_maturity_e8s_equivalent_buckets"`
	VotingPowerBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"voting_power_buckets" json:"voting_power_buckets"`
	DecidingVotingPowerBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"deciding_voting_power_buckets" json:"deciding_voting_power_buckets"`
	PotentialVotingPowerBuckets []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"potential_voting_power_buckets" json:"potential_voting_power_buckets"`
}

type NeuronsFundAuditInfo struct {
	FinalNeuronsFundParticipation   *NeuronsFundParticipation `ic:"final_neurons_fund_participation,omitempty" json:"final_neurons_fund_participation,omitempty"`
	InitialNeuronsFundParticipation *NeuronsFundParticipation `ic:"initial_neurons_fund_participation,omitempty" json:"initial_neurons_fund_participation,omitempty"`
	NeuronsFundRefunds              *NeuronsFundSnapshot      `ic:"neurons_fund_refunds,omitempty" json:"neurons_fund_refunds,omitempty"`
}

type NeuronsFundData struct {
	FinalNeuronsFundParticipation   *NeuronsFundParticipation `ic:"final_neurons_fund_participation,omitempty" json:"final_neurons_fund_participation,omitempty"`
	InitialNeuronsFundParticipation *NeuronsFundParticipation `ic:"initial_neurons_fund_participation,omitempty" json:"initial_neurons_fund_participation,omitempty"`
	NeuronsFundRefunds              *NeuronsFundSnapshot      `ic:"neurons_fund_refunds,omitempty" json:"neurons_fund_refunds,omitempty"`
}

type NeuronsFundEconomics struct {
	MaximumIcpXdrRate                               *Percentage                                 `ic:"maximum_icp_xdr_rate,omitempty" json:"maximum_icp_xdr_rate,omitempty"`
	NeuronsFundMatchedFundingCurveCoefficients      *NeuronsFundMatchedFundingCurveCoefficients `ic:"neurons_fund_matched_funding_curve_coefficients,omitempty" json:"neurons_fund_matched_funding_curve_coefficients,omitempty"`
	MaxTheoreticalNeuronsFundParticipationAmountXdr *Decimal                                    `ic:"max_theoretical_neurons_fund_participation_amount_xdr,omitempty" json:"max_theoretical_neurons_fund_participation_amount_xdr,omitempty"`
	MinimumIcpXdrRate                               *Percentage                                 `ic:"minimum_icp_xdr_rate,omitempty" json:"minimum_icp_xdr_rate,omitempty"`
}

type NeuronsFundMatchedFundingCurveCoefficients struct {
	ContributionThresholdXdr          *Decimal `ic:"contribution_threshold_xdr,omitempty" json:"contribution_threshold_xdr,omitempty"`
	OneThirdParticipationMilestoneXdr *Decimal `ic:"one_third_participation_milestone_xdr,omitempty" json:"one_third_participation_milestone_xdr,omitempty"`
	FullParticipationMilestoneXdr     *Decimal `ic:"full_participation_milestone_xdr,omitempty" json:"full_participation_milestone_xdr,omitempty"`
}

type NeuronsFundNeuron struct {
	Controller   *principal.Principal `ic:"controller,omitempty" json:"controller,omitempty"`
	Hotkeys      *Principals          `ic:"hotkeys,omitempty" json:"hotkeys,omitempty"`
	IsCapped     *bool                `ic:"is_capped,omitempty" json:"is_capped,omitempty"`
	NnsNeuronId  *uint64              `ic:"nns_neuron_id,omitempty" json:"nns_neuron_id,omitempty"`
	AmountIcpE8s *uint64              `ic:"amount_icp_e8s,omitempty" json:"amount_icp_e8s,omitempty"`
}

type NeuronsFundNeuronPortion struct {
	Controller               *principal.Principal  `ic:"controller,omitempty" json:"controller,omitempty"`
	Hotkeys                  []principal.Principal `ic:"hotkeys" json:"hotkeys"`
	IsCapped                 *bool                 `ic:"is_capped,omitempty" json:"is_capped,omitempty"`
	MaturityEquivalentIcpE8s *uint64               `ic:"maturity_equivalent_icp_e8s,omitempty" json:"maturity_equivalent_icp_e8s,omitempty"`
	NnsNeuronId              *NeuronId             `ic:"nns_neuron_id,omitempty" json:"nns_neuron_id,omitempty"`
	AmountIcpE8s             *uint64               `ic:"amount_icp_e8s,omitempty" json:"amount_icp_e8s,omitempty"`
}

type NeuronsFundParticipation struct {
	TotalMaturityEquivalentIcpE8s           *uint64                            `ic:"total_maturity_equivalent_icp_e8s,omitempty" json:"total_maturity_equivalent_icp_e8s,omitempty"`
	IntendedNeuronsFundParticipationIcpE8s  *uint64                            `ic:"intended_neurons_fund_participation_icp_e8s,omitempty" json:"intended_neurons_fund_participation_icp_e8s,omitempty"`
	DirectParticipationIcpE8s               *uint64                            `ic:"direct_participation_icp_e8s,omitempty" json:"direct_participation_icp_e8s,omitempty"`
	SwapParticipationLimits                 *SwapParticipationLimits           `ic:"swap_participation_limits,omitempty" json:"swap_participation_limits,omitempty"`
	MaxNeuronsFundSwapParticipationIcpE8s   *uint64                            `ic:"max_neurons_fund_swap_participation_icp_e8s,omitempty" json:"max_neurons_fund_swap_participation_icp_e8s,omitempty"`
	NeuronsFundReserves                     *NeuronsFundSnapshot               `ic:"neurons_fund_reserves,omitempty" json:"neurons_fund_reserves,omitempty"`
	IdealMatchedParticipationFunction       *IdealMatchedParticipationFunction `ic:"ideal_matched_participation_function,omitempty" json:"ideal_matched_participation_function,omitempty"`
	AllocatedNeuronsFundParticipationIcpE8s *uint64                            `ic:"allocated_neurons_fund_participation_icp_e8s,omitempty" json:"allocated_neurons_fund_participation_icp_e8s,omitempty"`
}

type NeuronsFundSnapshot struct {
	NeuronsFundNeuronPortions []NeuronsFundNeuronPortion `ic:"neurons_fund_neuron_portions" json:"neurons_fund_neuron_portions"`
}

type NodeProvider struct {
	Id            *principal.Principal `ic:"id,omitempty" json:"id,omitempty"`
	RewardAccount *AccountIdentifier   `ic:"reward_account,omitempty" json:"reward_account,omitempty"`
}

type Ok struct {
	NeuronsFundAuditInfo *NeuronsFundAuditInfo `ic:"neurons_fund_audit_info,omitempty" json:"neurons_fund_audit_info,omitempty"`
}

type Ok1 struct {
	NeuronsFundNeuronPortions []NeuronsFundNeuron `ic:"neurons_fund_neuron_portions" json:"neurons_fund_neuron_portions"`
}

type OpenSnsTokenSwap struct {
	CommunityFundInvestmentE8s *uint64              `ic:"community_fund_investment_e8s,omitempty" json:"community_fund_investment_e8s,omitempty"`
	TargetSwapCanisterId       *principal.Principal `ic:"target_swap_canister_id,omitempty" json:"target_swap_canister_id,omitempty"`
	Params                     *Params              `ic:"params,omitempty" json:"params,omitempty"`
}

type Operation struct {
	RemoveHotKey            *RemoveHotKey            `ic:"RemoveHotKey,variant" json:"RemoveHotKey,omitempty"`
	AddHotKey               *AddHotKey               `ic:"AddHotKey,variant" json:"AddHotKey,omitempty"`
	ChangeAutoStakeMaturity *ChangeAutoStakeMaturity `ic:"ChangeAutoStakeMaturity,variant" json:"ChangeAutoStakeMaturity,omitempty"`
	StopDissolving          *struct {
	} `ic:"StopDissolving,variant" json:"StopDissolving,omitempty"`
	StartDissolving *struct {
	} `ic:"StartDissolving,variant" json:"StartDissolving,omitempty"`
	IncreaseDissolveDelay *IncreaseDissolveDelay `ic:"IncreaseDissolveDelay,variant" json:"IncreaseDissolveDelay,omitempty"`
	SetVisibility         *SetVisibility         `ic:"SetVisibility,variant" json:"SetVisibility,omitempty"`
	JoinCommunityFund     *struct {
	} `ic:"JoinCommunityFund,variant" json:"JoinCommunityFund,omitempty"`
	LeaveCommunityFund *struct {
	} `ic:"LeaveCommunityFund,variant" json:"LeaveCommunityFund,omitempty"`
	SetDissolveTimestamp *SetDissolveTimestamp `ic:"SetDissolveTimestamp,variant" json:"SetDissolveTimestamp,omitempty"`
}

type Params struct {
	MinParticipantIcpE8s               uint64                               `ic:"min_participant_icp_e8s" json:"min_participant_icp_e8s"`
	NeuronBasketConstructionParameters *NeuronBasketConstructionParameters1 `ic:"neuron_basket_construction_parameters,omitempty" json:"neuron_basket_construction_parameters,omitempty"`
	MaxIcpE8s                          uint64                               `ic:"max_icp_e8s" json:"max_icp_e8s"`
	SwapDueTimestampSeconds            uint64                               `ic:"swap_due_timestamp_seconds" json:"swap_due_timestamp_seconds"`
	MinParticipants                    uint32                               `ic:"min_participants" json:"min_participants"`
	SnsTokenE8s                        uint64                               `ic:"sns_token_e8s" json:"sns_token_e8s"`
	SaleDelaySeconds                   *uint64                              `ic:"sale_delay_seconds,omitempty" json:"sale_delay_seconds,omitempty"`
	MaxParticipantIcpE8s               uint64                               `ic:"max_participant_icp_e8s" json:"max_participant_icp_e8s"`
	MinDirectParticipationIcpE8s       *uint64                              `ic:"min_direct_participation_icp_e8s,omitempty" json:"min_direct_participation_icp_e8s,omitempty"`
	MinIcpE8s                          uint64                               `ic:"min_icp_e8s" json:"min_icp_e8s"`
	MaxDirectParticipationIcpE8s       *uint64                              `ic:"max_direct_participation_icp_e8s,omitempty" json:"max_direct_participation_icp_e8s,omitempty"`
}

type Percentage struct {
	BasisPoints *uint64 `ic:"basis_points,omitempty" json:"basis_points,omitempty"`
}

type Principals struct {
	Principals []principal.Principal `ic:"principals" json:"principals"`
}

type Progress struct {
	LastNeuronId *NeuronId `ic:"LastNeuronId,variant" json:"LastNeuronId,omitempty"`
}

type Proposal struct {
	Url     string  `ic:"url" json:"url"`
	Title   *string `ic:"title,omitempty" json:"title,omitempty"`
	Action  *Action `ic:"action,omitempty" json:"action,omitempty"`
	Summary string  `ic:"summary" json:"summary"`
}

type ProposalActionRequest struct {
	RegisterKnownNeuron        *KnownNeuron                `ic:"RegisterKnownNeuron,variant" json:"RegisterKnownNeuron,omitempty"`
	ManageNeuron               *ManageNeuronRequest        `ic:"ManageNeuron,variant" json:"ManageNeuron,omitempty"`
	UpdateCanisterSettings     *UpdateCanisterSettings     `ic:"UpdateCanisterSettings,variant" json:"UpdateCanisterSettings,omitempty"`
	InstallCode                *InstallCodeRequest         `ic:"InstallCode,variant" json:"InstallCode,omitempty"`
	StopOrStartCanister        *StopOrStartCanister        `ic:"StopOrStartCanister,variant" json:"StopOrStartCanister,omitempty"`
	CreateServiceNervousSystem *CreateServiceNervousSystem `ic:"CreateServiceNervousSystem,variant" json:"CreateServiceNervousSystem,omitempty"`
	ExecuteNnsFunction         *ExecuteNnsFunction         `ic:"ExecuteNnsFunction,variant" json:"ExecuteNnsFunction,omitempty"`
	RewardNodeProvider         *RewardNodeProvider         `ic:"RewardNodeProvider,variant" json:"RewardNodeProvider,omitempty"`
	RewardNodeProviders        *RewardNodeProviders        `ic:"RewardNodeProviders,variant" json:"RewardNodeProviders,omitempty"`
	ManageNetworkEconomics     *NetworkEconomics           `ic:"ManageNetworkEconomics,variant" json:"ManageNetworkEconomics,omitempty"`
	ApproveGenesisKyc          *Principals                 `ic:"ApproveGenesisKyc,variant" json:"ApproveGenesisKyc,omitempty"`
	AddOrRemoveNodeProvider    *AddOrRemoveNodeProvider    `ic:"AddOrRemoveNodeProvider,variant" json:"AddOrRemoveNodeProvider,omitempty"`
	Motion                     *Motion                     `ic:"Motion,variant" json:"Motion,omitempty"`
}

type ProposalData struct {
	Id            *ProposalId      `ic:"id,omitempty" json:"id,omitempty"`
	FailureReason *GovernanceError `ic:"failure_reason,omitempty" json:"failure_reason,omitempty"`
	Ballots       []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 Ballot `ic:"1" json:"1"`
	} `ic:"ballots" json:"ballots"`
	ProposalTimestampSeconds                        uint64                      `ic:"proposal_timestamp_seconds" json:"proposal_timestamp_seconds"`
	RewardEventRound                                uint64                      `ic:"reward_event_round" json:"reward_event_round"`
	FailedTimestampSeconds                          uint64                      `ic:"failed_timestamp_seconds" json:"failed_timestamp_seconds"`
	NeuronsFundData                                 *NeuronsFundData            `ic:"neurons_fund_data,omitempty" json:"neurons_fund_data,omitempty"`
	RejectCostE8s                                   uint64                      `ic:"reject_cost_e8s" json:"reject_cost_e8s"`
	DerivedProposalInformation                      *DerivedProposalInformation `ic:"derived_proposal_information,omitempty" json:"derived_proposal_information,omitempty"`
	LatestTally                                     *Tally                      `ic:"latest_tally,omitempty" json:"latest_tally,omitempty"`
	SnsTokenSwapLifecycle                           *int32                      `ic:"sns_token_swap_lifecycle,omitempty" json:"sns_token_swap_lifecycle,omitempty"`
	DecidedTimestampSeconds                         uint64                      `ic:"decided_timestamp_seconds" json:"decided_timestamp_seconds"`
	Proposal                                        *Proposal                   `ic:"proposal,omitempty" json:"proposal,omitempty"`
	Proposer                                        *NeuronId                   `ic:"proposer,omitempty" json:"proposer,omitempty"`
	WaitForQuietState                               *WaitForQuietState          `ic:"wait_for_quiet_state,omitempty" json:"wait_for_quiet_state,omitempty"`
	ExecutedTimestampSeconds                        uint64                      `ic:"executed_timestamp_seconds" json:"executed_timestamp_seconds"`
	OriginalTotalCommunityFundMaturityE8sEquivalent *uint64                     `ic:"original_total_community_fund_maturity_e8s_equivalent,omitempty" json:"original_total_community_fund_maturity_e8s_equivalent,omitempty"`
	TotalPotentialVotingPower                       *uint64                     `ic:"total_potential_voting_power,omitempty" json:"total_potential_voting_power,omitempty"`
}

type ProposalId struct {
	Id uint64 `ic:"id" json:"id"`
}

type ProposalInfo struct {
	Id            *ProposalId      `ic:"id,omitempty" json:"id,omitempty"`
	Status        int32            `ic:"status" json:"status"`
	Topic         int32            `ic:"topic" json:"topic"`
	FailureReason *GovernanceError `ic:"failure_reason,omitempty" json:"failure_reason,omitempty"`
	Ballots       []struct {
		Field0 uint64 `ic:"0" json:"0"`
		Field1 Ballot `ic:"1" json:"1"`
	} `ic:"ballots" json:"ballots"`
	ProposalTimestampSeconds   uint64                      `ic:"proposal_timestamp_seconds" json:"proposal_timestamp_seconds"`
	RewardEventRound           uint64                      `ic:"reward_event_round" json:"reward_event_round"`
	DeadlineTimestampSeconds   *uint64                     `ic:"deadline_timestamp_seconds,omitempty" json:"deadline_timestamp_seconds,omitempty"`
	FailedTimestampSeconds     uint64                      `ic:"failed_timestamp_seconds" json:"failed_timestamp_seconds"`
	RejectCostE8s              uint64                      `ic:"reject_cost_e8s" json:"reject_cost_e8s"`
	DerivedProposalInformation *DerivedProposalInformation `ic:"derived_proposal_information,omitempty" json:"derived_proposal_information,omitempty"`
	LatestTally                *Tally                      `ic:"latest_tally,omitempty" json:"latest_tally,omitempty"`
	RewardStatus               int32                       `ic:"reward_status" json:"reward_status"`
	DecidedTimestampSeconds    uint64                      `ic:"decided_timestamp_seconds" json:"decided_timestamp_seconds"`
	Proposal                   *Proposal                   `ic:"proposal,omitempty" json:"proposal,omitempty"`
	Proposer                   *NeuronId                   `ic:"proposer,omitempty" json:"proposer,omitempty"`
	ExecutedTimestampSeconds   uint64                      `ic:"executed_timestamp_seconds" json:"executed_timestamp_seconds"`
	TotalPotentialVotingPower  *uint64                     `ic:"total_potential_voting_power,omitempty" json:"total_potential_voting_power,omitempty"`
}

type RefreshVotingPower struct {
}

type RefreshVotingPowerResponse struct {
}

type RegisterVote struct {
	Vote     int32       `ic:"vote" json:"vote"`
	Proposal *ProposalId `ic:"proposal,omitempty" json:"proposal,omitempty"`
}

type RemoveHotKey struct {
	HotKeyToRemove *principal.Principal `ic:"hot_key_to_remove,omitempty" json:"hot_key_to_remove,omitempty"`
}

type RestoreAgingNeuronGroup struct {
	Count                 *uint64 `ic:"count,omitempty" json:"count,omitempty"`
	PreviousTotalStakeE8s *uint64 `ic:"previous_total_stake_e8s,omitempty" json:"previous_total_stake_e8s,omitempty"`
	CurrentTotalStakeE8s  *uint64 `ic:"current_total_stake_e8s,omitempty" json:"current_total_stake_e8s,omitempty"`
	GroupType             int32   `ic:"group_type" json:"group_type"`
}

type RestoreAgingSummary struct {
	Groups           []RestoreAgingNeuronGroup `ic:"groups" json:"groups"`
	TimestampSeconds *uint64                   `ic:"timestamp_seconds,omitempty" json:"timestamp_seconds,omitempty"`
}

type Result struct {
	Ok  *idl.Null        `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError `ic:"Err,variant" json:"Err,omitempty"`
}

type Result1 struct {
	Error    *GovernanceError `ic:"Error,variant" json:"Error,omitempty"`
	NeuronId *NeuronId        `ic:"NeuronId,variant" json:"NeuronId,omitempty"`
}

type Result10 struct {
	Ok  *Ok1             `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError `ic:"Err,variant" json:"Err,omitempty"`
}

type Result2 struct {
	Ok  *Neuron          `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError `ic:"Err,variant" json:"Err,omitempty"`
}

type Result3 struct {
	Ok  *GovernanceCachedMetrics `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError         `ic:"Err,variant" json:"Err,omitempty"`
}

type Result4 struct {
	Ok  *MonthlyNodeProviderRewards `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError            `ic:"Err,variant" json:"Err,omitempty"`
}

type Result5 struct {
	Ok  *NeuronInfo      `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError `ic:"Err,variant" json:"Err,omitempty"`
}

type Result6 struct {
	Ok  *Ok              `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError `ic:"Err,variant" json:"Err,omitempty"`
}

type Result7 struct {
	Ok  *NodeProvider    `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *GovernanceError `ic:"Err,variant" json:"Err,omitempty"`
}

type Result8 struct {
	Committed *Committed `ic:"Committed,variant" json:"Committed,omitempty"`
	Aborted   *struct {
	} `ic:"Aborted,variant" json:"Aborted,omitempty"`
}

type Result9 struct {
	Committed *Committed1 `ic:"Committed,variant" json:"Committed,omitempty"`
	Aborted   *struct {
	} `ic:"Aborted,variant" json:"Aborted,omitempty"`
}

type RewardEvent struct {
	RoundsSinceLastDistribution       *uint64      `ic:"rounds_since_last_distribution,omitempty" json:"rounds_since_last_distribution,omitempty"`
	DayAfterGenesis                   uint64       `ic:"day_after_genesis" json:"day_after_genesis"`
	ActualTimestampSeconds            uint64       `ic:"actual_timestamp_seconds" json:"actual_timestamp_seconds"`
	TotalAvailableE8sEquivalent       uint64       `ic:"total_available_e8s_equivalent" json:"total_available_e8s_equivalent"`
	LatestRoundAvailableE8sEquivalent *uint64      `ic:"latest_round_available_e8s_equivalent,omitempty" json:"latest_round_available_e8s_equivalent,omitempty"`
	DistributedE8sEquivalent          uint64       `ic:"distributed_e8s_equivalent" json:"distributed_e8s_equivalent"`
	SettledProposals                  []ProposalId `ic:"settled_proposals" json:"settled_proposals"`
}

type RewardMode struct {
	RewardToNeuron  *RewardToNeuron  `ic:"RewardToNeuron,variant" json:"RewardToNeuron,omitempty"`
	RewardToAccount *RewardToAccount `ic:"RewardToAccount,variant" json:"RewardToAccount,omitempty"`
}

type RewardNodeProvider struct {
	NodeProvider *NodeProvider `ic:"node_provider,omitempty" json:"node_provider,omitempty"`
	RewardMode   *RewardMode   `ic:"reward_mode,omitempty" json:"reward_mode,omitempty"`
	AmountE8s    uint64        `ic:"amount_e8s" json:"amount_e8s"`
}

type RewardNodeProviders struct {
	UseRegistryDerivedRewards *bool                `ic:"use_registry_derived_rewards,omitempty" json:"use_registry_derived_rewards,omitempty"`
	Rewards                   []RewardNodeProvider `ic:"rewards" json:"rewards"`
}

type RewardToAccount struct {
	ToAccount *AccountIdentifier `ic:"to_account,omitempty" json:"to_account,omitempty"`
}

type RewardToNeuron struct {
	DissolveDelaySeconds uint64 `ic:"dissolve_delay_seconds" json:"dissolve_delay_seconds"`
}

type SetDefaultFollowees struct {
	DefaultFollowees []struct {
		Field0 int32     `ic:"0" json:"0"`
		Field1 Followees `ic:"1" json:"1"`
	} `ic:"default_followees" json:"default_followees"`
}

type SetDissolveTimestamp struct {
	DissolveTimestampSeconds uint64 `ic:"dissolve_timestamp_seconds" json:"dissolve_timestamp_seconds"`
}

type SetOpenTimeWindowRequest struct {
	OpenTimeWindow *TimeWindow `ic:"open_time_window,omitempty" json:"open_time_window,omitempty"`
}

type SetSnsTokenSwapOpenTimeWindow struct {
	Request        *SetOpenTimeWindowRequest `ic:"request,omitempty" json:"request,omitempty"`
	SwapCanisterId *principal.Principal      `ic:"swap_canister_id,omitempty" json:"swap_canister_id,omitempty"`
}

type SetVisibility struct {
	Visibility *int32 `ic:"visibility,omitempty" json:"visibility,omitempty"`
}

type SettleCommunityFundParticipation struct {
	Result                     *Result8 `ic:"result,omitempty" json:"result,omitempty"`
	OpenSnsTokenSwapProposalId *uint64  `ic:"open_sns_token_swap_proposal_id,omitempty" json:"open_sns_token_swap_proposal_id,omitempty"`
}

type SettleNeuronsFundParticipationRequest struct {
	Result        *Result9 `ic:"result,omitempty" json:"result,omitempty"`
	NnsProposalId *uint64  `ic:"nns_proposal_id,omitempty" json:"nns_proposal_id,omitempty"`
}

type SettleNeuronsFundParticipationResponse struct {
	Result *Result10 `ic:"result,omitempty" json:"result,omitempty"`
}

type Spawn struct {
	PercentageToSpawn *uint32              `ic:"percentage_to_spawn,omitempty" json:"percentage_to_spawn,omitempty"`
	NewController     *principal.Principal `ic:"new_controller,omitempty" json:"new_controller,omitempty"`
	Nonce             *uint64              `ic:"nonce,omitempty" json:"nonce,omitempty"`
}

type SpawnResponse struct {
	CreatedNeuronId *NeuronId `ic:"created_neuron_id,omitempty" json:"created_neuron_id,omitempty"`
}

type Split struct {
	AmountE8s uint64 `ic:"amount_e8s" json:"amount_e8s"`
}

type StakeMaturity struct {
	PercentageToStake *uint32 `ic:"percentage_to_stake,omitempty" json:"percentage_to_stake,omitempty"`
}

type StakeMaturityResponse struct {
	MaturityE8s       uint64 `ic:"maturity_e8s" json:"maturity_e8s"`
	StakedMaturityE8s uint64 `ic:"staked_maturity_e8s" json:"staked_maturity_e8s"`
}

type StopOrStartCanister struct {
	Action     *int32               `ic:"action,omitempty" json:"action,omitempty"`
	CanisterId *principal.Principal `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
}

type SwapBackgroundInformation struct {
	LedgerIndexCanisterSummary     *CanisterSummary      `ic:"ledger_index_canister_summary,omitempty" json:"ledger_index_canister_summary,omitempty"`
	FallbackControllerPrincipalIds []principal.Principal `ic:"fallback_controller_principal_ids" json:"fallback_controller_principal_ids"`
	LedgerArchiveCanisterSummaries []CanisterSummary     `ic:"ledger_archive_canister_summaries" json:"ledger_archive_canister_summaries"`
	LedgerCanisterSummary          *CanisterSummary      `ic:"ledger_canister_summary,omitempty" json:"ledger_canister_summary,omitempty"`
	SwapCanisterSummary            *CanisterSummary      `ic:"swap_canister_summary,omitempty" json:"swap_canister_summary,omitempty"`
	GovernanceCanisterSummary      *CanisterSummary      `ic:"governance_canister_summary,omitempty" json:"governance_canister_summary,omitempty"`
	RootCanisterSummary            *CanisterSummary      `ic:"root_canister_summary,omitempty" json:"root_canister_summary,omitempty"`
	DappCanisterSummaries          []CanisterSummary     `ic:"dapp_canister_summaries" json:"dapp_canister_summaries"`
}

type SwapDistribution struct {
	Total *Tokens `ic:"total,omitempty" json:"total,omitempty"`
}

type SwapParameters struct {
	MinimumParticipants                *uint64                             `ic:"minimum_participants,omitempty" json:"minimum_participants,omitempty"`
	NeuronsFundParticipation           *bool                               `ic:"neurons_fund_participation,omitempty" json:"neurons_fund_participation,omitempty"`
	Duration                           *Duration                           `ic:"duration,omitempty" json:"duration,omitempty"`
	NeuronBasketConstructionParameters *NeuronBasketConstructionParameters `ic:"neuron_basket_construction_parameters,omitempty" json:"neuron_basket_construction_parameters,omitempty"`
	ConfirmationText                   *string                             `ic:"confirmation_text,omitempty" json:"confirmation_text,omitempty"`
	MaximumParticipantIcp              *Tokens                             `ic:"maximum_participant_icp,omitempty" json:"maximum_participant_icp,omitempty"`
	MinimumIcp                         *Tokens                             `ic:"minimum_icp,omitempty" json:"minimum_icp,omitempty"`
	MinimumDirectParticipationIcp      *Tokens                             `ic:"minimum_direct_participation_icp,omitempty" json:"minimum_direct_participation_icp,omitempty"`
	MinimumParticipantIcp              *Tokens                             `ic:"minimum_participant_icp,omitempty" json:"minimum_participant_icp,omitempty"`
	StartTime                          *GlobalTimeOfDay                    `ic:"start_time,omitempty" json:"start_time,omitempty"`
	MaximumDirectParticipationIcp      *Tokens                             `ic:"maximum_direct_participation_icp,omitempty" json:"maximum_direct_participation_icp,omitempty"`
	MaximumIcp                         *Tokens                             `ic:"maximum_icp,omitempty" json:"maximum_icp,omitempty"`
	NeuronsFundInvestmentIcp           *Tokens                             `ic:"neurons_fund_investment_icp,omitempty" json:"neurons_fund_investment_icp,omitempty"`
	RestrictedCountries                *Countries                          `ic:"restricted_countries,omitempty" json:"restricted_countries,omitempty"`
}

type SwapParticipationLimits struct {
	MinParticipantIcpE8s         *uint64 `ic:"min_participant_icp_e8s,omitempty" json:"min_participant_icp_e8s,omitempty"`
	MaxParticipantIcpE8s         *uint64 `ic:"max_participant_icp_e8s,omitempty" json:"max_participant_icp_e8s,omitempty"`
	MinDirectParticipationIcpE8s *uint64 `ic:"min_direct_participation_icp_e8s,omitempty" json:"min_direct_participation_icp_e8s,omitempty"`
	MaxDirectParticipationIcpE8s *uint64 `ic:"max_direct_participation_icp_e8s,omitempty" json:"max_direct_participation_icp_e8s,omitempty"`
}

type Tally struct {
	No               uint64 `ic:"no" json:"no"`
	Yes              uint64 `ic:"yes" json:"yes"`
	Total            uint64 `ic:"total" json:"total"`
	TimestampSeconds uint64 `ic:"timestamp_seconds" json:"timestamp_seconds"`
}

type TimeWindow struct {
	StartTimestampSeconds uint64 `ic:"start_timestamp_seconds" json:"start_timestamp_seconds"`
	EndTimestampSeconds   uint64 `ic:"end_timestamp_seconds" json:"end_timestamp_seconds"`
}

type Tokens struct {
	E8s *uint64 `ic:"e8s,omitempty" json:"e8s,omitempty"`
}

type UpdateCanisterSettings struct {
	CanisterId *principal.Principal `ic:"canister_id,omitempty" json:"canister_id,omitempty"`
	Settings   *CanisterSettings    `ic:"settings,omitempty" json:"settings,omitempty"`
}

type UpdateNodeProvider struct {
	RewardAccount *AccountIdentifier `ic:"reward_account,omitempty" json:"reward_account,omitempty"`
}

type VotingPowerEconomics struct {
	StartReducingVotingPowerAfterSeconds *uint64 `ic:"start_reducing_voting_power_after_seconds,omitempty" json:"start_reducing_voting_power_after_seconds,omitempty"`
	ClearFollowingAfterSeconds           *uint64 `ic:"clear_following_after_seconds,omitempty" json:"clear_following_after_seconds,omitempty"`
}

type VotingRewardParameters struct {
	RewardRateTransitionDuration *Duration   `ic:"reward_rate_transition_duration,omitempty" json:"reward_rate_transition_duration,omitempty"`
	InitialRewardRate            *Percentage `ic:"initial_reward_rate,omitempty" json:"initial_reward_rate,omitempty"`
	FinalRewardRate              *Percentage `ic:"final_reward_rate,omitempty" json:"final_reward_rate,omitempty"`
}

type WaitForQuietState struct {
	CurrentDeadlineTimestampSeconds uint64 `ic:"current_deadline_timestamp_seconds" json:"current_deadline_timestamp_seconds"`
}

type XdrConversionRate struct {
	XdrPermyriadPerIcp *uint64 `ic:"xdr_permyriad_per_icp,omitempty" json:"xdr_permyriad_per_icp,omitempty"`
	TimestampSeconds   *uint64 `ic:"timestamp_seconds,omitempty" json:"timestamp_seconds,omitempty"`
}
