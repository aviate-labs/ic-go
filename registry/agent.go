// Package registry provides a client for the "registry" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package registry

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/principal"
)

type AddApiBoundaryNodesPayload struct {
	Version string                `ic:"version" json:"version"`
	NodeIds []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type AddFirewallRulesPayload struct {
	ExpectedHash string             `ic:"expected_hash" json:"expected_hash"`
	Scope        FirewallRulesScope `ic:"scope" json:"scope"`
	Positions    []int32            `ic:"positions" json:"positions"`
	Rules        []FirewallRule     `ic:"rules" json:"rules"`
}

type AddNodeOperatorPayload struct {
	Ipv6                    *string              `ic:"ipv6,omitempty" json:"ipv6,omitempty"`
	NodeOperatorPrincipalId *principal.Principal `ic:"node_operator_principal_id,omitempty" json:"node_operator_principal_id,omitempty"`
	NodeAllowance           uint64               `ic:"node_allowance" json:"node_allowance"`
	RewardableNodes         []struct {
		Field0 string `ic:"0" json:"0"`
		Field1 uint32 `ic:"1" json:"1"`
	} `ic:"rewardable_nodes" json:"rewardable_nodes"`
	NodeProviderPrincipalId *principal.Principal `ic:"node_provider_principal_id,omitempty" json:"node_provider_principal_id,omitempty"`
	DcId                    string               `ic:"dc_id" json:"dc_id"`
}

type AddNodePayload struct {
	PrometheusMetricsEndpoint string      `ic:"prometheus_metrics_endpoint" json:"prometheus_metrics_endpoint"`
	HttpEndpoint              string      `ic:"http_endpoint" json:"http_endpoint"`
	IdkgDealingEncryptionPk   *[]byte     `ic:"idkg_dealing_encryption_pk,omitempty" json:"idkg_dealing_encryption_pk,omitempty"`
	Domain                    *string     `ic:"domain,omitempty" json:"domain,omitempty"`
	PublicIpv4Config          *IPv4Config `ic:"public_ipv4_config,omitempty" json:"public_ipv4_config,omitempty"`
	XnetEndpoint              string      `ic:"xnet_endpoint" json:"xnet_endpoint"`
	ChipId                    *[]byte     `ic:"chip_id,omitempty" json:"chip_id,omitempty"`
	CommitteeSigningPk        []byte      `ic:"committee_signing_pk" json:"committee_signing_pk"`
	NodeSigningPk             []byte      `ic:"node_signing_pk" json:"node_signing_pk"`
	TransportTlsCert          []byte      `ic:"transport_tls_cert" json:"transport_tls_cert"`
	NiDkgDealingEncryptionPk  []byte      `ic:"ni_dkg_dealing_encryption_pk" json:"ni_dkg_dealing_encryption_pk"`
	P2pFlowEndpoints          []string    `ic:"p2p_flow_endpoints" json:"p2p_flow_endpoints"`
	NodeRewardType            *string     `ic:"node_reward_type,omitempty" json:"node_reward_type,omitempty"`
}

type AddNodesToSubnetPayload struct {
	SubnetId principal.Principal   `ic:"subnet_id" json:"subnet_id"`
	NodeIds  []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type AddOrRemoveDataCentersProposalPayload struct {
	DataCentersToAdd    []DataCenterRecord `ic:"data_centers_to_add" json:"data_centers_to_add"`
	DataCentersToRemove []string           `ic:"data_centers_to_remove" json:"data_centers_to_remove"`
}

// Agent is a client for the "registry" canister.
type Agent struct {
	*agent.Agent
	CanisterId principal.Principal
}

// NewAgent creates a new agent for the "registry" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &Agent{
		Agent:      a,
		CanisterId: canisterId,
	}, nil
}

// AddApiBoundaryNodes calls the "add_api_boundary_nodes" method on the "registry" canister.
func (a Agent) AddApiBoundaryNodes(arg0 AddApiBoundaryNodesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"add_api_boundary_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// AddFirewallRules calls the "add_firewall_rules" method on the "registry" canister.
func (a Agent) AddFirewallRules(arg0 AddFirewallRulesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"add_firewall_rules",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// AddNode calls the "add_node" method on the "registry" canister.
func (a Agent) AddNode(arg0 AddNodePayload) (*principal.Principal, error) {
	var r0 principal.Principal
	if err := a.Agent.Call(
		a.CanisterId,
		"add_node",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// AddNodeOperator calls the "add_node_operator" method on the "registry" canister.
func (a Agent) AddNodeOperator(arg0 AddNodeOperatorPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"add_node_operator",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// AddNodesToSubnet calls the "add_nodes_to_subnet" method on the "registry" canister.
func (a Agent) AddNodesToSubnet(arg0 AddNodesToSubnetPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"add_nodes_to_subnet",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// AddOrRemoveDataCenters calls the "add_or_remove_data_centers" method on the "registry" canister.
func (a Agent) AddOrRemoveDataCenters(arg0 AddOrRemoveDataCentersProposalPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"add_or_remove_data_centers",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// ChangeSubnetMembership calls the "change_subnet_membership" method on the "registry" canister.
func (a Agent) ChangeSubnetMembership(arg0 ChangeSubnetMembershipPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"change_subnet_membership",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// ClearProvisionalWhitelist calls the "clear_provisional_whitelist" method on the "registry" canister.
func (a Agent) ClearProvisionalWhitelist() error {
	if err := a.Agent.Call(
		a.CanisterId,
		"clear_provisional_whitelist",
		[]any{},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// CompleteCanisterMigration calls the "complete_canister_migration" method on the "registry" canister.
func (a Agent) CompleteCanisterMigration(arg0 CompleteCanisterMigrationPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"complete_canister_migration",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// CreateSubnet calls the "create_subnet" method on the "registry" canister.
func (a Agent) CreateSubnet(arg0 CreateSubnetPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"create_subnet",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// DeployGuestosToAllSubnetNodes calls the "deploy_guestos_to_all_subnet_nodes" method on the "registry" canister.
func (a Agent) DeployGuestosToAllSubnetNodes(arg0 DeployGuestosToAllSubnetNodesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"deploy_guestos_to_all_subnet_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// DeployGuestosToAllUnassignedNodes calls the "deploy_guestos_to_all_unassigned_nodes" method on the "registry" canister.
func (a Agent) DeployGuestosToAllUnassignedNodes(arg0 DeployGuestosToAllUnassignedNodesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"deploy_guestos_to_all_unassigned_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// DeployGuestosToSomeApiBoundaryNodes calls the "deploy_guestos_to_some_api_boundary_nodes" method on the "registry" canister.
func (a Agent) DeployGuestosToSomeApiBoundaryNodes(arg0 DeployGuestosToSomeApiBoundaryNodes) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"deploy_guestos_to_some_api_boundary_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// DeployHostosToSomeNodes calls the "deploy_hostos_to_some_nodes" method on the "registry" canister.
func (a Agent) DeployHostosToSomeNodes(arg0 DeployHostosToSomeNodes) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"deploy_hostos_to_some_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// GetApiBoundaryNodeIds calls the "get_api_boundary_node_ids" method on the "registry" canister.
func (a Agent) GetApiBoundaryNodeIds(arg0 GetApiBoundaryNodeIdsRequest) (*GetApiBoundaryNodeIdsResponse, error) {
	var r0 GetApiBoundaryNodeIdsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_api_boundary_node_ids",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetBuildMetadata calls the "get_build_metadata" method on the "registry" canister.
func (a Agent) GetBuildMetadata() (*string, error) {
	var r0 string
	if err := a.Agent.Query(
		a.CanisterId,
		"get_build_metadata",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNodeOperatorsAndDcsOfNodeProvider calls the "get_node_operators_and_dcs_of_node_provider" method on the "registry" canister.
func (a Agent) GetNodeOperatorsAndDcsOfNodeProvider(arg0 principal.Principal) (*GetNodeOperatorsAndDcsOfNodeProviderResponse, error) {
	var r0 GetNodeOperatorsAndDcsOfNodeProviderResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_node_operators_and_dcs_of_node_provider",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetNodeProvidersMonthlyXdrRewards calls the "get_node_providers_monthly_xdr_rewards" method on the "registry" canister.
func (a Agent) GetNodeProvidersMonthlyXdrRewards() (*GetNodeProvidersMonthlyXdrRewardsResponse, error) {
	var r0 GetNodeProvidersMonthlyXdrRewardsResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_node_providers_monthly_xdr_rewards",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetSubnetForCanister calls the "get_subnet_for_canister" method on the "registry" canister.
func (a Agent) GetSubnetForCanister(arg0 GetSubnetForCanisterRequest) (*GetSubnetForCanisterResponse, error) {
	var r0 GetSubnetForCanisterResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"get_subnet_for_canister",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// PrepareCanisterMigration calls the "prepare_canister_migration" method on the "registry" canister.
func (a Agent) PrepareCanisterMigration(arg0 PrepareCanisterMigrationPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"prepare_canister_migration",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RecoverSubnet calls the "recover_subnet" method on the "registry" canister.
func (a Agent) RecoverSubnet(arg0 RecoverSubnetPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"recover_subnet",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RemoveApiBoundaryNodes calls the "remove_api_boundary_nodes" method on the "registry" canister.
func (a Agent) RemoveApiBoundaryNodes(arg0 RemoveApiBoundaryNodesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"remove_api_boundary_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RemoveFirewallRules calls the "remove_firewall_rules" method on the "registry" canister.
func (a Agent) RemoveFirewallRules(arg0 RemoveFirewallRulesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"remove_firewall_rules",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RemoveNodeDirectly calls the "remove_node_directly" method on the "registry" canister.
func (a Agent) RemoveNodeDirectly(arg0 RemoveNodeDirectlyPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"remove_node_directly",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RemoveNodeOperators calls the "remove_node_operators" method on the "registry" canister.
func (a Agent) RemoveNodeOperators(arg0 RemoveNodeOperatorsPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"remove_node_operators",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RemoveNodes calls the "remove_nodes" method on the "registry" canister.
func (a Agent) RemoveNodes(arg0 RemoveNodesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"remove_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RemoveNodesFromSubnet calls the "remove_nodes_from_subnet" method on the "registry" canister.
func (a Agent) RemoveNodesFromSubnet(arg0 RemoveNodesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"remove_nodes_from_subnet",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RerouteCanisterRanges calls the "reroute_canister_ranges" method on the "registry" canister.
func (a Agent) RerouteCanisterRanges(arg0 RerouteCanisterRangesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"reroute_canister_ranges",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// ReviseElectedGuestosVersions calls the "revise_elected_guestos_versions" method on the "registry" canister.
func (a Agent) ReviseElectedGuestosVersions(arg0 ReviseElectedGuestosVersionsPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"revise_elected_guestos_versions",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// ReviseElectedHostosVersions calls the "revise_elected_hostos_versions" method on the "registry" canister.
func (a Agent) ReviseElectedHostosVersions(arg0 ReviseElectedHostosVersionsPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"revise_elected_hostos_versions",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// ReviseElectedReplicaVersions calls the "revise_elected_replica_versions" method on the "registry" canister.
func (a Agent) ReviseElectedReplicaVersions(arg0 ReviseElectedGuestosVersionsPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"revise_elected_replica_versions",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// SetFirewallConfig calls the "set_firewall_config" method on the "registry" canister.
func (a Agent) SetFirewallConfig(arg0 SetFirewallConfigPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"set_firewall_config",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateApiBoundaryNodesVersion calls the "update_api_boundary_nodes_version" method on the "registry" canister.
func (a Agent) UpdateApiBoundaryNodesVersion(arg0 UpdateApiBoundaryNodesVersionPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_api_boundary_nodes_version",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateElectedHostosVersions calls the "update_elected_hostos_versions" method on the "registry" canister.
func (a Agent) UpdateElectedHostosVersions(arg0 UpdateElectedHostosVersionsPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_elected_hostos_versions",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateFirewallRules calls the "update_firewall_rules" method on the "registry" canister.
func (a Agent) UpdateFirewallRules(arg0 UpdateFirewallRulesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_firewall_rules",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateNodeDirectly calls the "update_node_directly" method on the "registry" canister.
func (a Agent) UpdateNodeDirectly(arg0 UpdateNodeDirectlyPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_node_directly",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateNodeDomainDirectly calls the "update_node_domain_directly" method on the "registry" canister.
func (a Agent) UpdateNodeDomainDirectly(arg0 UpdateNodeDomainDirectlyPayload) (*UpdateNodeDomainDirectlyResponse, error) {
	var r0 UpdateNodeDomainDirectlyResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"update_node_domain_directly",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// UpdateNodeIpv4ConfigDirectly calls the "update_node_ipv4_config_directly" method on the "registry" canister.
func (a Agent) UpdateNodeIpv4ConfigDirectly(arg0 UpdateNodeIPv4ConfigDirectlyPayload) (*UpdateNodeIpv4ConfigDirectlyResponse, error) {
	var r0 UpdateNodeIpv4ConfigDirectlyResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"update_node_ipv4_config_directly",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// UpdateNodeOperatorConfig calls the "update_node_operator_config" method on the "registry" canister.
func (a Agent) UpdateNodeOperatorConfig(arg0 UpdateNodeOperatorConfigPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_node_operator_config",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateNodeOperatorConfigDirectly calls the "update_node_operator_config_directly" method on the "registry" canister.
func (a Agent) UpdateNodeOperatorConfigDirectly(arg0 UpdateNodeOperatorConfigDirectlyPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_node_operator_config_directly",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateNodeRewardsTable calls the "update_node_rewards_table" method on the "registry" canister.
func (a Agent) UpdateNodeRewardsTable(arg0 UpdateNodeRewardsTableProposalPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_node_rewards_table",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateNodesHostosVersion calls the "update_nodes_hostos_version" method on the "registry" canister.
func (a Agent) UpdateNodesHostosVersion(arg0 UpdateNodesHostosVersionPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_nodes_hostos_version",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateSshReadonlyAccessForAllUnassignedNodes calls the "update_ssh_readonly_access_for_all_unassigned_nodes" method on the "registry" canister.
func (a Agent) UpdateSshReadonlyAccessForAllUnassignedNodes(arg0 UpdateSshReadOnlyAccessForAllUnassignedNodesPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_ssh_readonly_access_for_all_unassigned_nodes",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateSubnet calls the "update_subnet" method on the "registry" canister.
func (a Agent) UpdateSubnet(arg0 UpdateSubnetPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_subnet",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UpdateUnassignedNodesConfig calls the "update_unassigned_nodes_config" method on the "registry" canister.
func (a Agent) UpdateUnassignedNodesConfig(arg0 UpdateUnassignedNodesConfigPayload) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"update_unassigned_nodes_config",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

type ApiBoundaryNodeIdRecord struct {
	Id *principal.Principal `ic:"id,omitempty" json:"id,omitempty"`
}

type CanisterIdRange struct {
	End   principal.Principal `ic:"end" json:"end"`
	Start principal.Principal `ic:"start" json:"start"`
}

type ChainKeyConfig struct {
	KeyConfigs                []KeyConfig `ic:"key_configs" json:"key_configs"`
	SignatureRequestTimeoutNs *uint64     `ic:"signature_request_timeout_ns,omitempty" json:"signature_request_timeout_ns,omitempty"`
	IdkgKeyRotationPeriodMs   *uint64     `ic:"idkg_key_rotation_period_ms,omitempty" json:"idkg_key_rotation_period_ms,omitempty"`
}

type ChangeSubnetMembershipPayload struct {
	NodeIdsAdd    []principal.Principal `ic:"node_ids_add" json:"node_ids_add"`
	SubnetId      principal.Principal   `ic:"subnet_id" json:"subnet_id"`
	NodeIdsRemove []principal.Principal `ic:"node_ids_remove" json:"node_ids_remove"`
}

type CompleteCanisterMigrationPayload struct {
	CanisterIdRanges []CanisterIdRange     `ic:"canister_id_ranges" json:"canister_id_ranges"`
	MigrationTrace   []principal.Principal `ic:"migration_trace" json:"migration_trace"`
}

type CreateSubnetPayload struct {
	UnitDelayMillis                 uint64                 `ic:"unit_delay_millis" json:"unit_delay_millis"`
	Features                        SubnetFeatures         `ic:"features" json:"features"`
	GossipRegistryPollPeriodMs      uint32                 `ic:"gossip_registry_poll_period_ms" json:"gossip_registry_poll_period_ms"`
	MaxIngressBytesPerMessage       uint64                 `ic:"max_ingress_bytes_per_message" json:"max_ingress_bytes_per_message"`
	DkgDealingsPerBlock             uint64                 `ic:"dkg_dealings_per_block" json:"dkg_dealings_per_block"`
	MaxBlockPayloadSize             uint64                 `ic:"max_block_payload_size" json:"max_block_payload_size"`
	StartAsNns                      bool                   `ic:"start_as_nns" json:"start_as_nns"`
	IsHalted                        bool                   `ic:"is_halted" json:"is_halted"`
	GossipPfnEvaluationPeriodMs     uint32                 `ic:"gossip_pfn_evaluation_period_ms" json:"gossip_pfn_evaluation_period_ms"`
	MaxIngressMessagesPerBlock      uint64                 `ic:"max_ingress_messages_per_block" json:"max_ingress_messages_per_block"`
	MaxNumberOfCanisters            uint64                 `ic:"max_number_of_canisters" json:"max_number_of_canisters"`
	ChainKeyConfig                  *InitialChainKeyConfig `ic:"chain_key_config,omitempty" json:"chain_key_config,omitempty"`
	GossipMaxArtifactStreamsPerPeer uint32                 `ic:"gossip_max_artifact_streams_per_peer" json:"gossip_max_artifact_streams_per_peer"`
	ReplicaVersionId                string                 `ic:"replica_version_id" json:"replica_version_id"`
	GossipMaxDuplicity              uint32                 `ic:"gossip_max_duplicity" json:"gossip_max_duplicity"`
	GossipMaxChunkWaitMs            uint32                 `ic:"gossip_max_chunk_wait_ms" json:"gossip_max_chunk_wait_ms"`
	DkgIntervalLength               uint64                 `ic:"dkg_interval_length" json:"dkg_interval_length"`
	SubnetIdOverride                *principal.Principal   `ic:"subnet_id_override,omitempty" json:"subnet_id_override,omitempty"`
	SshBackupAccess                 []string               `ic:"ssh_backup_access" json:"ssh_backup_access"`
	IngressBytesPerBlockSoftCap     uint64                 `ic:"ingress_bytes_per_block_soft_cap" json:"ingress_bytes_per_block_soft_cap"`
	InitialNotaryDelayMillis        uint64                 `ic:"initial_notary_delay_millis" json:"initial_notary_delay_millis"`
	GossipMaxChunkSize              uint32                 `ic:"gossip_max_chunk_size" json:"gossip_max_chunk_size"`
	SubnetType                      SubnetType             `ic:"subnet_type" json:"subnet_type"`
	SshReadonlyAccess               []string               `ic:"ssh_readonly_access" json:"ssh_readonly_access"`
	GossipRetransmissionRequestMs   uint32                 `ic:"gossip_retransmission_request_ms" json:"gossip_retransmission_request_ms"`
	GossipReceiveCheckCacheSize     uint32                 `ic:"gossip_receive_check_cache_size" json:"gossip_receive_check_cache_size"`
	NodeIds                         []principal.Principal  `ic:"node_ids" json:"node_ids"`
}

type DataCenterRecord struct {
	Id     string `ic:"id" json:"id"`
	Gps    *Gps   `ic:"gps,omitempty" json:"gps,omitempty"`
	Region string `ic:"region" json:"region"`
	Owner  string `ic:"owner" json:"owner"`
}

type DeployGuestosToAllSubnetNodesPayload struct {
	SubnetId         principal.Principal `ic:"subnet_id" json:"subnet_id"`
	ReplicaVersionId string              `ic:"replica_version_id" json:"replica_version_id"`
}

type DeployGuestosToAllUnassignedNodesPayload struct {
	ElectedReplicaVersion string `ic:"elected_replica_version" json:"elected_replica_version"`
}

type DeployGuestosToSomeApiBoundaryNodes struct {
	Version string                `ic:"version" json:"version"`
	NodeIds []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type DeployHostosToSomeNodes struct {
	HostosVersionId *string               `ic:"hostos_version_id,omitempty" json:"hostos_version_id,omitempty"`
	NodeIds         []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type EcdsaConfig struct {
	QuadruplesToCreateInAdvance uint32       `ic:"quadruples_to_create_in_advance" json:"quadruples_to_create_in_advance"`
	MaxQueueSize                *uint32      `ic:"max_queue_size,omitempty" json:"max_queue_size,omitempty"`
	KeyIds                      []EcdsaKeyId `ic:"key_ids" json:"key_ids"`
	SignatureRequestTimeoutNs   *uint64      `ic:"signature_request_timeout_ns,omitempty" json:"signature_request_timeout_ns,omitempty"`
	IdkgKeyRotationPeriodMs     *uint64      `ic:"idkg_key_rotation_period_ms,omitempty" json:"idkg_key_rotation_period_ms,omitempty"`
}

type EcdsaCurve struct {
	Secp256k1 *idl.Null `ic:"secp256k1,variant" json:"secp256k1,omitempty"`
}

type EcdsaInitialConfig struct {
	QuadruplesToCreateInAdvance uint32            `ic:"quadruples_to_create_in_advance" json:"quadruples_to_create_in_advance"`
	MaxQueueSize                *uint32           `ic:"max_queue_size,omitempty" json:"max_queue_size,omitempty"`
	Keys                        []EcdsaKeyRequest `ic:"keys" json:"keys"`
	SignatureRequestTimeoutNs   *uint64           `ic:"signature_request_timeout_ns,omitempty" json:"signature_request_timeout_ns,omitempty"`
	IdkgKeyRotationPeriodMs     *uint64           `ic:"idkg_key_rotation_period_ms,omitempty" json:"idkg_key_rotation_period_ms,omitempty"`
}

type EcdsaKeyId struct {
	Name  string     `ic:"name" json:"name"`
	Curve EcdsaCurve `ic:"curve" json:"curve"`
}

type EcdsaKeyRequest struct {
	KeyId    EcdsaKeyId           `ic:"key_id" json:"key_id"`
	SubnetId *principal.Principal `ic:"subnet_id,omitempty" json:"subnet_id,omitempty"`
}

type FirewallRule struct {
	Ipv4Prefixes []string `ic:"ipv4_prefixes" json:"ipv4_prefixes"`
	Direction    *int32   `ic:"direction,omitempty" json:"direction,omitempty"`
	Action       int32    `ic:"action" json:"action"`
	User         *string  `ic:"user,omitempty" json:"user,omitempty"`
	Comment      string   `ic:"comment" json:"comment"`
	Ipv6Prefixes []string `ic:"ipv6_prefixes" json:"ipv6_prefixes"`
	Ports        []uint32 `ic:"ports" json:"ports"`
}

type FirewallRulesScope struct {
	Node             *principal.Principal `ic:"Node,variant" json:"Node,omitempty"`
	ReplicaNodes     *idl.Null            `ic:"ReplicaNodes,variant" json:"ReplicaNodes,omitempty"`
	ApiBoundaryNodes *idl.Null            `ic:"ApiBoundaryNodes,variant" json:"ApiBoundaryNodes,omitempty"`
	Subnet           *principal.Principal `ic:"Subnet,variant" json:"Subnet,omitempty"`
	Global           *idl.Null            `ic:"Global,variant" json:"Global,omitempty"`
}

type GetApiBoundaryNodeIdsRequest struct {
}

type GetApiBoundaryNodeIdsResponse struct {
	Ok  *[]ApiBoundaryNodeIdRecord `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *string                    `ic:"Err,variant" json:"Err,omitempty"`
}

type GetNodeOperatorsAndDcsOfNodeProviderResponse struct {
	Ok *[]struct {
		Field0 DataCenterRecord   `ic:"0" json:"0"`
		Field1 NodeOperatorRecord `ic:"1" json:"1"`
	} `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *string `ic:"Err,variant" json:"Err,omitempty"`
}

type GetNodeProvidersMonthlyXdrRewardsResponse struct {
	Ok  *NodeProvidersMonthlyXdrRewards `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *string                         `ic:"Err,variant" json:"Err,omitempty"`
}

type GetSubnetForCanisterRequest struct {
	Principal *principal.Principal `ic:""principal",omitempty" json:""principal",omitempty"`
}

type GetSubnetForCanisterResponse struct {
	Ok *struct {
		SubnetId *principal.Principal `ic:"subnet_id,omitempty" json:"subnet_id,omitempty"`
	} `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *string `ic:"Err,variant" json:"Err,omitempty"`
}

type Gps struct {
	Latitude  float32 `ic:"latitude" json:"latitude"`
	Longitude float32 `ic:"longitude" json:"longitude"`
}

type IPv4Config struct {
	PrefixLength  uint32 `ic:"prefix_length" json:"prefix_length"`
	GatewayIpAddr string `ic:"gateway_ip_addr" json:"gateway_ip_addr"`
	IpAddr        string `ic:"ip_addr" json:"ip_addr"`
}

type InitialChainKeyConfig struct {
	KeyConfigs                []KeyConfigRequest `ic:"key_configs" json:"key_configs"`
	SignatureRequestTimeoutNs *uint64            `ic:"signature_request_timeout_ns,omitempty" json:"signature_request_timeout_ns,omitempty"`
	IdkgKeyRotationPeriodMs   *uint64            `ic:"idkg_key_rotation_period_ms,omitempty" json:"idkg_key_rotation_period_ms,omitempty"`
}

type KeyConfig struct {
	KeyId                          *MasterPublicKeyId `ic:"key_id,omitempty" json:"key_id,omitempty"`
	PreSignaturesToCreateInAdvance *uint32            `ic:"pre_signatures_to_create_in_advance,omitempty" json:"pre_signatures_to_create_in_advance,omitempty"`
	MaxQueueSize                   *uint32            `ic:"max_queue_size,omitempty" json:"max_queue_size,omitempty"`
}

type KeyConfigRequest struct {
	KeyConfig *KeyConfig           `ic:"key_config,omitempty" json:"key_config,omitempty"`
	SubnetId  *principal.Principal `ic:"subnet_id,omitempty" json:"subnet_id,omitempty"`
}

type MasterPublicKeyId struct {
	Schnorr *SchnorrKeyId `ic:"Schnorr,variant" json:"Schnorr,omitempty"`
	Ecdsa   *EcdsaKeyId   `ic:"Ecdsa,variant" json:"Ecdsa,omitempty"`
	VetKd   *VetKdKeyId   `ic:"VetKd,variant" json:"VetKd,omitempty"`
}

type NodeOperatorPrincipals struct {
	Principals []principal.Principal `ic:"principals" json:"principals"`
}

type NodeOperatorRecord struct {
	Ipv6                    *string `ic:"ipv6,omitempty" json:"ipv6,omitempty"`
	NodeOperatorPrincipalId []byte  `ic:"node_operator_principal_id" json:"node_operator_principal_id"`
	NodeAllowance           uint64  `ic:"node_allowance" json:"node_allowance"`
	RewardableNodes         []struct {
		Field0 string `ic:"0" json:"0"`
		Field1 uint32 `ic:"1" json:"1"`
	} `ic:"rewardable_nodes" json:"rewardable_nodes"`
	NodeProviderPrincipalId []byte `ic:"node_provider_principal_id" json:"node_provider_principal_id"`
	DcId                    string `ic:"dc_id" json:"dc_id"`
}

type NodeProvidersMonthlyXdrRewards struct {
	Rewards []struct {
		Field0 string `ic:"0" json:"0"`
		Field1 uint64 `ic:"1" json:"1"`
	} `ic:"rewards" json:"rewards"`
	RegistryVersion *uint64 `ic:"registry_version,omitempty" json:"registry_version,omitempty"`
}

type NodeRewardRate struct {
	XdrPermyriadPerNodePerMonth uint64 `ic:"xdr_permyriad_per_node_per_month" json:"xdr_permyriad_per_node_per_month"`
	RewardCoefficientPercent    *int32 `ic:"reward_coefficient_percent,omitempty" json:"reward_coefficient_percent,omitempty"`
}

type NodeRewardRates struct {
	Rates []struct {
		Field0 string         `ic:"0" json:"0"`
		Field1 NodeRewardRate `ic:"1" json:"1"`
	} `ic:"rates" json:"rates"`
}

type PrepareCanisterMigrationPayload struct {
	CanisterIdRanges  []CanisterIdRange   `ic:"canister_id_ranges" json:"canister_id_ranges"`
	SourceSubnet      principal.Principal `ic:"source_subnet" json:"source_subnet"`
	DestinationSubnet principal.Principal `ic:"destination_subnet" json:"destination_subnet"`
}

type RecoverSubnetPayload struct {
	Height           uint64                 `ic:"height" json:"height"`
	ReplacementNodes *[]principal.Principal `ic:"replacement_nodes,omitempty" json:"replacement_nodes,omitempty"`
	SubnetId         principal.Principal    `ic:"subnet_id" json:"subnet_id"`
	RegistryStoreUri *struct {
		Field0 string `ic:"0" json:"0"`
		Field1 string `ic:"1" json:"1"`
		Field2 uint64 `ic:"2" json:"2"`
	} `ic:"registry_store_uri,omitempty" json:"registry_store_uri,omitempty"`
	ChainKeyConfig *InitialChainKeyConfig `ic:"chain_key_config,omitempty" json:"chain_key_config,omitempty"`
	StateHash      []byte                 `ic:"state_hash" json:"state_hash"`
	TimeNs         uint64                 `ic:"time_ns" json:"time_ns"`
}

type RemoveApiBoundaryNodesPayload struct {
	NodeIds []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type RemoveFirewallRulesPayload struct {
	ExpectedHash string             `ic:"expected_hash" json:"expected_hash"`
	Scope        FirewallRulesScope `ic:"scope" json:"scope"`
	Positions    []int32            `ic:"positions" json:"positions"`
}

type RemoveNodeDirectlyPayload struct {
	NodeId principal.Principal `ic:"node_id" json:"node_id"`
}

type RemoveNodeOperatorsPayload struct {
	NodeOperatorsToRemove          [][]byte                `ic:"node_operators_to_remove" json:"node_operators_to_remove"`
	NodeOperatorPrincipalsToRemove *NodeOperatorPrincipals `ic:"node_operator_principals_to_remove,omitempty" json:"node_operator_principals_to_remove,omitempty"`
}

type RemoveNodesFromSubnetPayload struct {
	NodeIds []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type RemoveNodesPayload struct {
	NodeIds []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type RerouteCanisterRangesPayload struct {
	SourceSubnet             principal.Principal `ic:"source_subnet" json:"source_subnet"`
	ReassignedCanisterRanges []CanisterIdRange   `ic:"reassigned_canister_ranges" json:"reassigned_canister_ranges"`
	DestinationSubnet        principal.Principal `ic:"destination_subnet" json:"destination_subnet"`
}

type ReviseElectedGuestosVersionsPayload struct {
	ReleasePackageUrls              []string `ic:"release_package_urls" json:"release_package_urls"`
	ReplicaVersionsToUnelect        []string `ic:"replica_versions_to_unelect" json:"replica_versions_to_unelect"`
	ReplicaVersionToElect           *string  `ic:"replica_version_to_elect,omitempty" json:"replica_version_to_elect,omitempty"`
	GuestLaunchMeasurementSha256Hex *string  `ic:"guest_launch_measurement_sha256_hex,omitempty" json:"guest_launch_measurement_sha256_hex,omitempty"`
	ReleasePackageSha256Hex         *string  `ic:"release_package_sha256_hex,omitempty" json:"release_package_sha256_hex,omitempty"`
}

type ReviseElectedHostosVersionsPayload struct {
	ReleasePackageUrls      []string `ic:"release_package_urls" json:"release_package_urls"`
	HostosVersionToElect    *string  `ic:"hostos_version_to_elect,omitempty" json:"hostos_version_to_elect,omitempty"`
	HostosVersionsToUnelect []string `ic:"hostos_versions_to_unelect" json:"hostos_versions_to_unelect"`
	ReleasePackageSha256Hex *string  `ic:"release_package_sha256_hex,omitempty" json:"release_package_sha256_hex,omitempty"`
}

type SchnorrAlgorithm struct {
	Ed25519         *idl.Null `ic:"ed25519,variant" json:"ed25519,omitempty"`
	Bip340secp256k1 *idl.Null `ic:"bip340secp256k1,variant" json:"bip340secp256k1,omitempty"`
}

type SchnorrKeyId struct {
	Algorithm SchnorrAlgorithm `ic:"algorithm" json:"algorithm"`
	Name      string           `ic:"name" json:"name"`
}

type SetFirewallConfigPayload struct {
	Ipv4Prefixes   []string `ic:"ipv4_prefixes" json:"ipv4_prefixes"`
	FirewallConfig string   `ic:"firewall_config" json:"firewall_config"`
	Ipv6Prefixes   []string `ic:"ipv6_prefixes" json:"ipv6_prefixes"`
}

type SubnetFeatures struct {
	CanisterSandboxing bool  `ic:"canister_sandboxing" json:"canister_sandboxing"`
	HttpRequests       bool  `ic:"http_requests" json:"http_requests"`
	SevEnabled         *bool `ic:"sev_enabled,omitempty" json:"sev_enabled,omitempty"`
}

type SubnetType struct {
	Application         *idl.Null `ic:"application,variant" json:"application,omitempty"`
	VerifiedApplication *idl.Null `ic:"verified_application,variant" json:"verified_application,omitempty"`
	System              *idl.Null `ic:"system,variant" json:"system,omitempty"`
}

type UpdateApiBoundaryNodesVersionPayload struct {
	Version string                `ic:"version" json:"version"`
	NodeIds []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type UpdateElectedHostosVersionsPayload struct {
	ReleasePackageUrls      []string `ic:"release_package_urls" json:"release_package_urls"`
	HostosVersionToElect    *string  `ic:"hostos_version_to_elect,omitempty" json:"hostos_version_to_elect,omitempty"`
	HostosVersionsToUnelect []string `ic:"hostos_versions_to_unelect" json:"hostos_versions_to_unelect"`
	ReleasePackageSha256Hex *string  `ic:"release_package_sha256_hex,omitempty" json:"release_package_sha256_hex,omitempty"`
}

type UpdateFirewallRulesPayload struct {
	ExpectedHash string             `ic:"expected_hash" json:"expected_hash"`
	Scope        FirewallRulesScope `ic:"scope" json:"scope"`
	Positions    []int32            `ic:"positions" json:"positions"`
	Rules        []FirewallRule     `ic:"rules" json:"rules"`
}

type UpdateNodeDirectlyPayload struct {
	IdkgDealingEncryptionPk *[]byte `ic:"idkg_dealing_encryption_pk,omitempty" json:"idkg_dealing_encryption_pk,omitempty"`
}

type UpdateNodeDomainDirectlyPayload struct {
	NodeId principal.Principal `ic:"node_id" json:"node_id"`
	Domain *string             `ic:"domain,omitempty" json:"domain,omitempty"`
}

type UpdateNodeDomainDirectlyResponse struct {
	Ok  *idl.Null `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *string   `ic:"Err,variant" json:"Err,omitempty"`
}

type UpdateNodeIPv4ConfigDirectlyPayload struct {
	Ipv4Config *IPv4Config         `ic:"ipv4_config,omitempty" json:"ipv4_config,omitempty"`
	NodeId     principal.Principal `ic:"node_id" json:"node_id"`
}

type UpdateNodeIpv4ConfigDirectlyResponse struct {
	Ok  *idl.Null `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *string   `ic:"Err,variant" json:"Err,omitempty"`
}

type UpdateNodeOperatorConfigDirectlyPayload struct {
	NodeOperatorId *principal.Principal `ic:"node_operator_id,omitempty" json:"node_operator_id,omitempty"`
	NodeProviderId *principal.Principal `ic:"node_provider_id,omitempty" json:"node_provider_id,omitempty"`
}

type UpdateNodeOperatorConfigPayload struct {
	NodeOperatorId  *principal.Principal `ic:"node_operator_id,omitempty" json:"node_operator_id,omitempty"`
	SetIpv6ToNone   *bool                `ic:"set_ipv6_to_none,omitempty" json:"set_ipv6_to_none,omitempty"`
	Ipv6            *string              `ic:"ipv6,omitempty" json:"ipv6,omitempty"`
	NodeProviderId  *principal.Principal `ic:"node_provider_id,omitempty" json:"node_provider_id,omitempty"`
	NodeAllowance   *uint64              `ic:"node_allowance,omitempty" json:"node_allowance,omitempty"`
	RewardableNodes []struct {
		Field0 string `ic:"0" json:"0"`
		Field1 uint32 `ic:"1" json:"1"`
	} `ic:"rewardable_nodes" json:"rewardable_nodes"`
	DcId *string `ic:"dc_id,omitempty" json:"dc_id,omitempty"`
}

type UpdateNodeRewardsTableProposalPayload struct {
	NewEntries []struct {
		Field0 string          `ic:"0" json:"0"`
		Field1 NodeRewardRates `ic:"1" json:"1"`
	} `ic:"new_entries" json:"new_entries"`
}

type UpdateNodesHostosVersionPayload struct {
	HostosVersionId *string               `ic:"hostos_version_id,omitempty" json:"hostos_version_id,omitempty"`
	NodeIds         []principal.Principal `ic:"node_ids" json:"node_ids"`
}

type UpdateSshReadOnlyAccessForAllUnassignedNodesPayload struct {
	SshReadonlyKeys []string `ic:"ssh_readonly_keys" json:"ssh_readonly_keys"`
}

type UpdateSubnetPayload struct {
	UnitDelayMillis            *uint64              `ic:"unit_delay_millis,omitempty" json:"unit_delay_millis,omitempty"`
	MaxDuplicity               *uint32              `ic:"max_duplicity,omitempty" json:"max_duplicity,omitempty"`
	Features                   *SubnetFeatures      `ic:"features,omitempty" json:"features,omitempty"`
	SetGossipConfigToDefault   bool                 `ic:"set_gossip_config_to_default" json:"set_gossip_config_to_default"`
	HaltAtCupHeight            *bool                `ic:"halt_at_cup_height,omitempty" json:"halt_at_cup_height,omitempty"`
	PfnEvaluationPeriodMs      *uint32              `ic:"pfn_evaluation_period_ms,omitempty" json:"pfn_evaluation_period_ms,omitempty"`
	SubnetId                   principal.Principal  `ic:"subnet_id" json:"subnet_id"`
	MaxIngressBytesPerMessage  *uint64              `ic:"max_ingress_bytes_per_message,omitempty" json:"max_ingress_bytes_per_message,omitempty"`
	DkgDealingsPerBlock        *uint64              `ic:"dkg_dealings_per_block,omitempty" json:"dkg_dealings_per_block,omitempty"`
	MaxBlockPayloadSize        *uint64              `ic:"max_block_payload_size,omitempty" json:"max_block_payload_size,omitempty"`
	StartAsNns                 *bool                `ic:"start_as_nns,omitempty" json:"start_as_nns,omitempty"`
	IsHalted                   *bool                `ic:"is_halted,omitempty" json:"is_halted,omitempty"`
	MaxIngressMessagesPerBlock *uint64              `ic:"max_ingress_messages_per_block,omitempty" json:"max_ingress_messages_per_block,omitempty"`
	MaxNumberOfCanisters       *uint64              `ic:"max_number_of_canisters,omitempty" json:"max_number_of_canisters,omitempty"`
	RetransmissionRequestMs    *uint32              `ic:"retransmission_request_ms,omitempty" json:"retransmission_request_ms,omitempty"`
	DkgIntervalLength          *uint64              `ic:"dkg_interval_length,omitempty" json:"dkg_interval_length,omitempty"`
	RegistryPollPeriodMs       *uint32              `ic:"registry_poll_period_ms,omitempty" json:"registry_poll_period_ms,omitempty"`
	MaxChunkWaitMs             *uint32              `ic:"max_chunk_wait_ms,omitempty" json:"max_chunk_wait_ms,omitempty"`
	ReceiveCheckCacheSize      *uint32              `ic:"receive_check_cache_size,omitempty" json:"receive_check_cache_size,omitempty"`
	SshBackupAccess            *[]string            `ic:"ssh_backup_access,omitempty" json:"ssh_backup_access,omitempty"`
	MaxChunkSize               *uint32              `ic:"max_chunk_size,omitempty" json:"max_chunk_size,omitempty"`
	InitialNotaryDelayMillis   *uint64              `ic:"initial_notary_delay_millis,omitempty" json:"initial_notary_delay_millis,omitempty"`
	MaxArtifactStreamsPerPeer  *uint32              `ic:"max_artifact_streams_per_peer,omitempty" json:"max_artifact_streams_per_peer,omitempty"`
	SubnetType                 *SubnetType          `ic:"subnet_type,omitempty" json:"subnet_type,omitempty"`
	SshReadonlyAccess          *[]string            `ic:"ssh_readonly_access,omitempty" json:"ssh_readonly_access,omitempty"`
	ChainKeyConfig             *ChainKeyConfig      `ic:"chain_key_config,omitempty" json:"chain_key_config,omitempty"`
	ChainKeySigningEnable      *[]MasterPublicKeyId `ic:"chain_key_signing_enable,omitempty" json:"chain_key_signing_enable,omitempty"`
	ChainKeySigningDisable     *[]MasterPublicKeyId `ic:"chain_key_signing_disable,omitempty" json:"chain_key_signing_disable,omitempty"`
}

type UpdateUnassignedNodesConfigPayload struct {
	ReplicaVersion    *string   `ic:"replica_version,omitempty" json:"replica_version,omitempty"`
	SshReadonlyAccess *[]string `ic:"ssh_readonly_access,omitempty" json:"ssh_readonly_access,omitempty"`
}

type VetKdCurve struct {
	Bls12381G2 *idl.Null `ic:"bls12_381_g2,variant" json:"bls12_381_g2,omitempty"`
}

type VetKdKeyId struct {
	Curve VetKdCurve `ic:"curve" json:"curve"`
	Name  string     `ic:"name" json:"name"`
}
