// Package assetstorage provides a client for the "assetstorage" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package assetstorage

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/principal"
)

// Agent is a client for the "assetstorage" canister.
type Agent struct {
	*agent.Agent
	CanisterId principal.Principal
}

// NewAgent creates a new agent for the "assetstorage" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &Agent{
		Agent:      a,
		CanisterId: canisterId,
	}, nil
}

// ApiVersion calls the "api_version" method on the "assetstorage" canister.
func (a Agent) ApiVersion() (*uint16, error) {
	var r0 uint16
	if err := a.Agent.Query(
		a.CanisterId,
		"api_version",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Authorize calls the "authorize" method on the "assetstorage" canister.
func (a Agent) Authorize(arg0 principal.Principal) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"authorize",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// CertifiedTree calls the "certified_tree" method on the "assetstorage" canister.
func (a Agent) CertifiedTree(arg0 struct {
}) (*struct {
	Certificate []byte `ic:"certificate" json:"certificate"`
	Tree        []byte `ic:"tree" json:"tree"`
}, error) {
	var r0 struct {
		Certificate []byte `ic:"certificate" json:"certificate"`
		Tree        []byte `ic:"tree" json:"tree"`
	}
	if err := a.Agent.Query(
		a.CanisterId,
		"certified_tree",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Clear calls the "clear" method on the "assetstorage" canister.
func (a Agent) Clear(arg0 ClearArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"clear",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// CommitBatch calls the "commit_batch" method on the "assetstorage" canister.
func (a Agent) CommitBatch(arg0 CommitBatchArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"commit_batch",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// CommitProposedBatch calls the "commit_proposed_batch" method on the "assetstorage" canister.
func (a Agent) CommitProposedBatch(arg0 CommitProposedBatchArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"commit_proposed_batch",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// ComputeEvidence calls the "compute_evidence" method on the "assetstorage" canister.
func (a Agent) ComputeEvidence(arg0 ComputeEvidenceArguments) (**[]byte, error) {
	var r0 *[]byte
	if err := a.Agent.Call(
		a.CanisterId,
		"compute_evidence",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Configure calls the "configure" method on the "assetstorage" canister.
func (a Agent) Configure(arg0 ConfigureArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"configure",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// CreateAsset calls the "create_asset" method on the "assetstorage" canister.
func (a Agent) CreateAsset(arg0 CreateAssetArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"create_asset",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// CreateBatch calls the "create_batch" method on the "assetstorage" canister.
func (a Agent) CreateBatch(arg0 struct {
}) (*struct {
	BatchId BatchId `ic:"batch_id" json:"batch_id"`
}, error) {
	var r0 struct {
		BatchId BatchId `ic:"batch_id" json:"batch_id"`
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"create_batch",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// CreateChunk calls the "create_chunk" method on the "assetstorage" canister.
func (a Agent) CreateChunk(arg0 struct {
	BatchId BatchId `ic:"batch_id" json:"batch_id"`
	Content []byte  `ic:"content" json:"content"`
}) (*struct {
	ChunkId ChunkId `ic:"chunk_id" json:"chunk_id"`
}, error) {
	var r0 struct {
		ChunkId ChunkId `ic:"chunk_id" json:"chunk_id"`
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"create_chunk",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// CreateChunks calls the "create_chunks" method on the "assetstorage" canister.
func (a Agent) CreateChunks(arg0 struct {
	BatchId BatchId  `ic:"batch_id" json:"batch_id"`
	Content [][]byte `ic:"content" json:"content"`
}) (*struct {
	ChunkIds []ChunkId `ic:"chunk_ids" json:"chunk_ids"`
}, error) {
	var r0 struct {
		ChunkIds []ChunkId `ic:"chunk_ids" json:"chunk_ids"`
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"create_chunks",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Deauthorize calls the "deauthorize" method on the "assetstorage" canister.
func (a Agent) Deauthorize(arg0 principal.Principal) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"deauthorize",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// DeleteAsset calls the "delete_asset" method on the "assetstorage" canister.
func (a Agent) DeleteAsset(arg0 DeleteAssetArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"delete_asset",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// DeleteBatch calls the "delete_batch" method on the "assetstorage" canister.
func (a Agent) DeleteBatch(arg0 DeleteBatchArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"delete_batch",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// Get calls the "get" method on the "assetstorage" canister.
func (a Agent) Get(arg0 struct {
	Key             Key      `ic:"key" json:"key"`
	AcceptEncodings []string `ic:"accept_encodings" json:"accept_encodings"`
}) (*struct {
	Content         []byte  `ic:"content" json:"content"`
	ContentType     string  `ic:"content_type" json:"content_type"`
	ContentEncoding string  `ic:"content_encoding" json:"content_encoding"`
	Sha256          *[]byte `ic:"sha256,omitempty" json:"sha256,omitempty"`
	TotalLength     idl.Nat `ic:"total_length" json:"total_length"`
}, error) {
	var r0 struct {
		Content         []byte  `ic:"content" json:"content"`
		ContentType     string  `ic:"content_type" json:"content_type"`
		ContentEncoding string  `ic:"content_encoding" json:"content_encoding"`
		Sha256          *[]byte `ic:"sha256,omitempty" json:"sha256,omitempty"`
		TotalLength     idl.Nat `ic:"total_length" json:"total_length"`
	}
	if err := a.Agent.Query(
		a.CanisterId,
		"get",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetAssetProperties calls the "get_asset_properties" method on the "assetstorage" canister.
func (a Agent) GetAssetProperties(key Key) (*struct {
	MaxAge         *uint64        `ic:"max_age,omitempty" json:"max_age,omitempty"`
	Headers        *[]HeaderField `ic:"headers,omitempty" json:"headers,omitempty"`
	AllowRawAccess *bool          `ic:"allow_raw_access,omitempty" json:"allow_raw_access,omitempty"`
	IsAliased      *bool          `ic:"is_aliased,omitempty" json:"is_aliased,omitempty"`
}, error) {
	var r0 struct {
		MaxAge         *uint64        `ic:"max_age,omitempty" json:"max_age,omitempty"`
		Headers        *[]HeaderField `ic:"headers,omitempty" json:"headers,omitempty"`
		AllowRawAccess *bool          `ic:"allow_raw_access,omitempty" json:"allow_raw_access,omitempty"`
		IsAliased      *bool          `ic:"is_aliased,omitempty" json:"is_aliased,omitempty"`
	}
	if err := a.Agent.Query(
		a.CanisterId,
		"get_asset_properties",
		[]any{key},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetChunk calls the "get_chunk" method on the "assetstorage" canister.
func (a Agent) GetChunk(arg0 struct {
	Key             Key     `ic:"key" json:"key"`
	ContentEncoding string  `ic:"content_encoding" json:"content_encoding"`
	Index           idl.Nat `ic:"index" json:"index"`
	Sha256          *[]byte `ic:"sha256,omitempty" json:"sha256,omitempty"`
}) (*struct {
	Content []byte `ic:"content" json:"content"`
}, error) {
	var r0 struct {
		Content []byte `ic:"content" json:"content"`
	}
	if err := a.Agent.Query(
		a.CanisterId,
		"get_chunk",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GetConfiguration calls the "get_configuration" method on the "assetstorage" canister.
func (a Agent) GetConfiguration() (*ConfigurationResponse, error) {
	var r0 ConfigurationResponse
	if err := a.Agent.Call(
		a.CanisterId,
		"get_configuration",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// GrantPermission calls the "grant_permission" method on the "assetstorage" canister.
func (a Agent) GrantPermission(arg0 GrantPermission) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"grant_permission",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// HttpRequest calls the "http_request" method on the "assetstorage" canister.
func (a Agent) HttpRequest(request HttpRequest) (*HttpResponse, error) {
	var r0 HttpResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"http_request",
		[]any{request},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// HttpRequestStreamingCallback calls the "http_request_streaming_callback" method on the "assetstorage" canister.
func (a Agent) HttpRequestStreamingCallback(token StreamingCallbackToken) (**StreamingCallbackHttpResponse, error) {
	var r0 *StreamingCallbackHttpResponse
	if err := a.Agent.Query(
		a.CanisterId,
		"http_request_streaming_callback",
		[]any{token},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// List calls the "list" method on the "assetstorage" canister.
func (a Agent) List(arg0 struct {
}) (*[]struct {
	Key         Key    `ic:"key" json:"key"`
	ContentType string `ic:"content_type" json:"content_type"`
	Encodings   []struct {
		ContentEncoding string  `ic:"content_encoding" json:"content_encoding"`
		Sha256          *[]byte `ic:"sha256,omitempty" json:"sha256,omitempty"`
		Length          idl.Nat `ic:"length" json:"length"`
		Modified        Time    `ic:"modified" json:"modified"`
	} `ic:"encodings" json:"encodings"`
}, error) {
	var r0 []struct {
		Key         Key    `ic:"key" json:"key"`
		ContentType string `ic:"content_type" json:"content_type"`
		Encodings   []struct {
			ContentEncoding string  `ic:"content_encoding" json:"content_encoding"`
			Sha256          *[]byte `ic:"sha256,omitempty" json:"sha256,omitempty"`
			Length          idl.Nat `ic:"length" json:"length"`
			Modified        Time    `ic:"modified" json:"modified"`
		} `ic:"encodings" json:"encodings"`
	}
	if err := a.Agent.Query(
		a.CanisterId,
		"list",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListAuthorized calls the "list_authorized" method on the "assetstorage" canister.
func (a Agent) ListAuthorized() (*[]principal.Principal, error) {
	var r0 []principal.Principal
	if err := a.Agent.Call(
		a.CanisterId,
		"list_authorized",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ListPermitted calls the "list_permitted" method on the "assetstorage" canister.
func (a Agent) ListPermitted(arg0 ListPermitted) (*[]principal.Principal, error) {
	var r0 []principal.Principal
	if err := a.Agent.Call(
		a.CanisterId,
		"list_permitted",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ProposeCommitBatch calls the "propose_commit_batch" method on the "assetstorage" canister.
func (a Agent) ProposeCommitBatch(arg0 CommitBatchArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"propose_commit_batch",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// RevokePermission calls the "revoke_permission" method on the "assetstorage" canister.
func (a Agent) RevokePermission(arg0 RevokePermission) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"revoke_permission",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// SetAssetContent calls the "set_asset_content" method on the "assetstorage" canister.
func (a Agent) SetAssetContent(arg0 SetAssetContentArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"set_asset_content",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// SetAssetProperties calls the "set_asset_properties" method on the "assetstorage" canister.
func (a Agent) SetAssetProperties(arg0 SetAssetPropertiesArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"set_asset_properties",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// Store calls the "store" method on the "assetstorage" canister.
func (a Agent) Store(arg0 struct {
	Key             Key     `ic:"key" json:"key"`
	ContentType     string  `ic:"content_type" json:"content_type"`
	ContentEncoding string  `ic:"content_encoding" json:"content_encoding"`
	Content         []byte  `ic:"content" json:"content"`
	Sha256          *[]byte `ic:"sha256,omitempty" json:"sha256,omitempty"`
}) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"store",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// TakeOwnership calls the "take_ownership" method on the "assetstorage" canister.
func (a Agent) TakeOwnership() error {
	if err := a.Agent.Call(
		a.CanisterId,
		"take_ownership",
		[]any{},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// UnsetAssetContent calls the "unset_asset_content" method on the "assetstorage" canister.
func (a Agent) UnsetAssetContent(arg0 UnsetAssetContentArguments) error {
	if err := a.Agent.Call(
		a.CanisterId,
		"unset_asset_content",
		[]any{arg0},
		[]any{},
	); err != nil {
		return err
	}
	return nil
}

// ValidateCommitProposedBatch calls the "validate_commit_proposed_batch" method on the "assetstorage" canister.
func (a Agent) ValidateCommitProposedBatch(arg0 CommitProposedBatchArguments) (*ValidationResult, error) {
	var r0 ValidationResult
	if err := a.Agent.Call(
		a.CanisterId,
		"validate_commit_proposed_batch",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ValidateConfigure calls the "validate_configure" method on the "assetstorage" canister.
func (a Agent) ValidateConfigure(arg0 ConfigureArguments) (*ValidationResult, error) {
	var r0 ValidationResult
	if err := a.Agent.Call(
		a.CanisterId,
		"validate_configure",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ValidateGrantPermission calls the "validate_grant_permission" method on the "assetstorage" canister.
func (a Agent) ValidateGrantPermission(arg0 GrantPermission) (*ValidationResult, error) {
	var r0 ValidationResult
	if err := a.Agent.Call(
		a.CanisterId,
		"validate_grant_permission",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ValidateRevokePermission calls the "validate_revoke_permission" method on the "assetstorage" canister.
func (a Agent) ValidateRevokePermission(arg0 RevokePermission) (*ValidationResult, error) {
	var r0 ValidationResult
	if err := a.Agent.Call(
		a.CanisterId,
		"validate_revoke_permission",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// ValidateTakeOwnership calls the "validate_take_ownership" method on the "assetstorage" canister.
func (a Agent) ValidateTakeOwnership() (*ValidationResult, error) {
	var r0 ValidationResult
	if err := a.Agent.Call(
		a.CanisterId,
		"validate_take_ownership",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

type AssetCanisterArgs struct {
	Init    *InitArgs    `ic:"Init,variant" json:"Init,omitempty"`
	Upgrade *UpgradeArgs `ic:"Upgrade,variant" json:"Upgrade,omitempty"`
}

type BatchId = idl.Nat

type BatchOperationKind struct {
	CreateAsset        *CreateAssetArguments        `ic:"CreateAsset,variant" json:"CreateAsset,omitempty"`
	SetAssetContent    *SetAssetContentArguments    `ic:"SetAssetContent,variant" json:"SetAssetContent,omitempty"`
	SetAssetProperties *SetAssetPropertiesArguments `ic:"SetAssetProperties,variant" json:"SetAssetProperties,omitempty"`
	UnsetAssetContent  *UnsetAssetContentArguments  `ic:"UnsetAssetContent,variant" json:"UnsetAssetContent,omitempty"`
	DeleteAsset        *DeleteAssetArguments        `ic:"DeleteAsset,variant" json:"DeleteAsset,omitempty"`
	Clear              *ClearArguments              `ic:"Clear,variant" json:"Clear,omitempty"`
}

type ChunkId = idl.Nat

type ClearArguments struct {
}

type CommitBatchArguments struct {
	BatchId    BatchId              `ic:"batch_id" json:"batch_id"`
	Operations []BatchOperationKind `ic:"operations" json:"operations"`
}

type CommitProposedBatchArguments struct {
	BatchId  BatchId `ic:"batch_id" json:"batch_id"`
	Evidence []byte  `ic:"evidence" json:"evidence"`
}

type ComputeEvidenceArguments struct {
	BatchId       BatchId `ic:"batch_id" json:"batch_id"`
	MaxIterations *uint16 `ic:"max_iterations,omitempty" json:"max_iterations,omitempty"`
}

type ConfigurationResponse struct {
	MaxBatches *uint64 `ic:"max_batches,omitempty" json:"max_batches,omitempty"`
	MaxChunks  *uint64 `ic:"max_chunks,omitempty" json:"max_chunks,omitempty"`
	MaxBytes   *uint64 `ic:"max_bytes,omitempty" json:"max_bytes,omitempty"`
}

type ConfigureArguments struct {
	MaxBatches **uint64 `ic:"max_batches,omitempty" json:"max_batches,omitempty"`
	MaxChunks  **uint64 `ic:"max_chunks,omitempty" json:"max_chunks,omitempty"`
	MaxBytes   **uint64 `ic:"max_bytes,omitempty" json:"max_bytes,omitempty"`
}

type CreateAssetArguments struct {
	Key            Key            `ic:"key" json:"key"`
	ContentType    string         `ic:"content_type" json:"content_type"`
	MaxAge         *uint64        `ic:"max_age,omitempty" json:"max_age,omitempty"`
	Headers        *[]HeaderField `ic:"headers,omitempty" json:"headers,omitempty"`
	EnableAliasing *bool          `ic:"enable_aliasing,omitempty" json:"enable_aliasing,omitempty"`
	AllowRawAccess *bool          `ic:"allow_raw_access,omitempty" json:"allow_raw_access,omitempty"`
}

type DeleteAssetArguments struct {
	Key Key `ic:"key" json:"key"`
}

type DeleteBatchArguments struct {
	BatchId BatchId `ic:"batch_id" json:"batch_id"`
}

type GrantPermission struct {
	ToPrincipal principal.Principal `ic:"to_principal" json:"to_principal"`
	Permission  Permission          `ic:"permission" json:"permission"`
}

type HeaderField struct {
	Field0 string `ic:"0" json:"0"`
	Field1 string `ic:"1" json:"1"`
}

type HttpRequest struct {
	Method             string        `ic:"method" json:"method"`
	Url                string        `ic:"url" json:"url"`
	Headers            []HeaderField `ic:"headers" json:"headers"`
	Body               []byte        `ic:"body" json:"body"`
	CertificateVersion *uint16       `ic:"certificate_version,omitempty" json:"certificate_version,omitempty"`
}

type HttpResponse struct {
	StatusCode        uint16             `ic:"status_code" json:"status_code"`
	Headers           []HeaderField      `ic:"headers" json:"headers"`
	Body              []byte             `ic:"body" json:"body"`
	StreamingStrategy *StreamingStrategy `ic:"streaming_strategy,omitempty" json:"streaming_strategy,omitempty"`
}

type InitArgs struct {
	SetPermissions *SetPermissions `ic:"set_permissions,omitempty" json:"set_permissions,omitempty"`
}

type Key = string

type ListPermitted struct {
	Permission Permission `ic:"permission" json:"permission"`
}

type Permission struct {
	Commit            *idl.Null `ic:"Commit,variant" json:"Commit,omitempty"`
	ManagePermissions *idl.Null `ic:"ManagePermissions,variant" json:"ManagePermissions,omitempty"`
	Prepare           *idl.Null `ic:"Prepare,variant" json:"Prepare,omitempty"`
}

type RevokePermission struct {
	OfPrincipal principal.Principal `ic:"of_principal" json:"of_principal"`
	Permission  Permission          `ic:"permission" json:"permission"`
}

type SetAssetContentArguments struct {
	Key             Key       `ic:"key" json:"key"`
	ContentEncoding string    `ic:"content_encoding" json:"content_encoding"`
	ChunkIds        []ChunkId `ic:"chunk_ids" json:"chunk_ids"`
	Sha256          *[]byte   `ic:"sha256,omitempty" json:"sha256,omitempty"`
}

type SetAssetPropertiesArguments struct {
	Key            Key             `ic:"key" json:"key"`
	MaxAge         **uint64        `ic:"max_age,omitempty" json:"max_age,omitempty"`
	Headers        **[]HeaderField `ic:"headers,omitempty" json:"headers,omitempty"`
	AllowRawAccess **bool          `ic:"allow_raw_access,omitempty" json:"allow_raw_access,omitempty"`
	IsAliased      **bool          `ic:"is_aliased,omitempty" json:"is_aliased,omitempty"`
}

type SetPermissions struct {
	Prepare           []principal.Principal `ic:"prepare" json:"prepare"`
	Commit            []principal.Principal `ic:"commit" json:"commit"`
	ManagePermissions []principal.Principal `ic:"manage_permissions" json:"manage_permissions"`
}

type StreamingCallbackHttpResponse struct {
	Body  []byte                  `ic:"body" json:"body"`
	Token *StreamingCallbackToken `ic:"token,omitempty" json:"token,omitempty"`
}

type StreamingCallbackToken struct {
	Key             Key     `ic:"key" json:"key"`
	ContentEncoding string  `ic:"content_encoding" json:"content_encoding"`
	Index           idl.Nat `ic:"index" json:"index"`
	Sha256          *[]byte `ic:"sha256,omitempty" json:"sha256,omitempty"`
}

type StreamingStrategy struct {
	Callback *struct {
		Callback idl.Function           `ic:"callback" json:"callback"`
		Token    StreamingCallbackToken `ic:"token" json:"token"`
	} `ic:"Callback,variant" json:"Callback,omitempty"`
}

type Time = idl.Int

type UnsetAssetContentArguments struct {
	Key             Key    `ic:"key" json:"key"`
	ContentEncoding string `ic:"content_encoding" json:"content_encoding"`
}

type UpgradeArgs struct {
	SetPermissions *SetPermissions `ic:"set_permissions,omitempty" json:"set_permissions,omitempty"`
}

type ValidationResult struct {
	Ok  *string `ic:"Ok,variant" json:"Ok,omitempty"`
	Err *string `ic:"Err,variant" json:"Err,omitempty"`
}
