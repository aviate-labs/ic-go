// Package icrc1 provides a client for the "icrc1" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package icrc1

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/principal"
)

type Account struct {
	Owner      principal.Principal `ic:"owner" json:"owner"`
	Subaccount *Subaccount         `ic:"subaccount,omitempty" json:"subaccount,omitempty"`
}

// Agent is a client for the "icrc1" canister.
type Agent struct {
	*agent.Agent
	CanisterId principal.Principal
}

// NewAgent creates a new agent for the "icrc1" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
	a, err := agent.New(config)
	if err != nil {
		return nil, err
	}
	return &Agent{
		Agent:      a,
		CanisterId: canisterId,
	}, nil
}

// Icrc1BalanceOf calls the "icrc1_balance_of" method on the "icrc1" canister.
func (a Agent) Icrc1BalanceOf(arg0 Account) (*idl.Nat, error) {
	var r0 idl.Nat
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_balance_of",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1Decimals calls the "icrc1_decimals" method on the "icrc1" canister.
func (a Agent) Icrc1Decimals() (*uint8, error) {
	var r0 uint8
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_decimals",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1Fee calls the "icrc1_fee" method on the "icrc1" canister.
func (a Agent) Icrc1Fee() (*idl.Nat, error) {
	var r0 idl.Nat
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_fee",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1Metadata calls the "icrc1_metadata" method on the "icrc1" canister.
func (a Agent) Icrc1Metadata() (*[]struct {
	Field0 string `ic:"0" json:"0"`
	Field1 Value  `ic:"1" json:"1"`
}, error) {
	var r0 []struct {
		Field0 string `ic:"0" json:"0"`
		Field1 Value  `ic:"1" json:"1"`
	}
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_metadata",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1MintingAccount calls the "icrc1_minting_account" method on the "icrc1" canister.
func (a Agent) Icrc1MintingAccount() (**Account, error) {
	var r0 *Account
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_minting_account",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1Name calls the "icrc1_name" method on the "icrc1" canister.
func (a Agent) Icrc1Name() (*string, error) {
	var r0 string
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_name",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1SupportedStandards calls the "icrc1_supported_standards" method on the "icrc1" canister.
func (a Agent) Icrc1SupportedStandards() (*[]struct {
	Name string `ic:"name" json:"name"`
	Url  string `ic:"url" json:"url"`
}, error) {
	var r0 []struct {
		Name string `ic:"name" json:"name"`
		Url  string `ic:"url" json:"url"`
	}
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_supported_standards",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1Symbol calls the "icrc1_symbol" method on the "icrc1" canister.
func (a Agent) Icrc1Symbol() (*string, error) {
	var r0 string
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_symbol",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1TotalSupply calls the "icrc1_total_supply" method on the "icrc1" canister.
func (a Agent) Icrc1TotalSupply() (*idl.Nat, error) {
	var r0 idl.Nat
	if err := a.Agent.Query(
		a.CanisterId,
		"icrc1_total_supply",
		[]any{},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

// Icrc1Transfer calls the "icrc1_transfer" method on the "icrc1" canister.
func (a Agent) Icrc1Transfer(arg0 TransferArgs) (*struct {
	Ok  *idl.Nat       `ic:"Ok,variant"`
	Err *TransferError `ic:"Err,variant"`
}, error) {
	var r0 struct {
		Ok  *idl.Nat       `ic:"Ok,variant"`
		Err *TransferError `ic:"Err,variant"`
	}
	if err := a.Agent.Call(
		a.CanisterId,
		"icrc1_transfer",
		[]any{arg0},
		[]any{&r0},
	); err != nil {
		return nil, err
	}
	return &r0, nil
}

type Duration = uint64

type Subaccount = []byte

type Timestamp = uint64

type TransferArgs struct {
	FromSubaccount *Subaccount `ic:"from_subaccount,omitempty" json:"from_subaccount,omitempty"`
	To             Account     `ic:"to" json:"to"`
	Amount         idl.Nat     `ic:"amount" json:"amount"`
	Fee            *idl.Nat    `ic:"fee,omitempty" json:"fee,omitempty"`
	Memo           *[]byte     `ic:"memo,omitempty" json:"memo,omitempty"`
	CreatedAtTime  *Timestamp  `ic:"created_at_time,omitempty" json:"created_at_time,omitempty"`
}

type TransferError struct {
	BadFee *struct {
		ExpectedFee idl.Nat `ic:"expected_fee" json:"expected_fee"`
	} `ic:"BadFee,variant"`
	BadBurn *struct {
		MinBurnAmount idl.Nat `ic:"min_burn_amount" json:"min_burn_amount"`
	} `ic:"BadBurn,variant"`
	InsufficientFunds *struct {
		Balance idl.Nat `ic:"balance" json:"balance"`
	} `ic:"InsufficientFunds,variant"`
	TooOld          *idl.Null `ic:"TooOld,variant"`
	CreatedInFuture *struct {
		LedgerTime Timestamp `ic:"ledger_time" json:"ledger_time"`
	} `ic:"CreatedInFuture,variant"`
	Duplicate *struct {
		DuplicateOf idl.Nat `ic:"duplicate_of" json:"duplicate_of"`
	} `ic:"Duplicate,variant"`
	TemporarilyUnavailable *idl.Null `ic:"TemporarilyUnavailable,variant"`
	GenericError           *struct {
		ErrorCode idl.Nat `ic:"error_code" json:"error_code"`
		Message   string  `ic:"message" json:"message"`
	} `ic:"GenericError,variant"`
}

type Value struct {
	Nat  *idl.Nat `ic:"Nat,variant"`
	Int  *idl.Int `ic:"Int,variant"`
	Text *string  `ic:"Text,variant"`
	Blob *[]byte  `ic:"Blob,variant"`
}
