package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path"
	"slices"
	"strings"
	"unicode"

	_ "embed"

	"github.com/aviate-labs/agent-go/gen"
	"github.com/aviate-labs/ic-go"
)

var (
	//go:embed config.json
	configRaw []byte
)

func main() {
	fmt.Println("Fetching all candid interfaces...")
	var c ic.Config
	if err := json.Unmarshal(configRaw, &c); err != nil {
		log.Fatal(err)
	}

	var argsKeys []string
	for k := range c.Args {
		argsKeys = append(argsKeys, k)
	}
	slices.Sort(argsKeys)

	var versions = "const (\n"
	for _, k := range argsKeys {
		v := c.Args[k]
		parts := strings.Split(v, "/")
		url := strings.ReplaceAll(strings.Join(parts[:len(parts)-1], "/"), "raw.githubusercontent.com", "github.com")
		versions += fmt.Sprintf("\t%s = %q // %s\n", strings.ToUpper(k), parts[len(parts)-1], url)
	}
	versions += ")\n"
	if err := os.WriteFile("versions.go", []byte(fmt.Sprintf("// Do NOT edit this file. It was automatically generated.\npackage ic\n\n%s", versions)), os.ModePerm); err != nil {
		log.Fatal(err)
	}

	for dir, ls := range c.Locations {
		fileDir := path.Join(c.Candid, dir)
		fmt.Printf("Checking %q...\n", fileDir)
		for k, l := range ls {
			filePath := path.Join(fileDir, fmt.Sprintf("%s.did", k))
			localDID, err := os.ReadFile(filePath)
			if err != nil {
				log.Fatal(err)
			}
			if bytes.Compare(l.CandidRaw, localDID) != 0 {
				if err := os.WriteFile(filePath, l.CandidRaw, os.ModePerm); err != nil {
					log.Fatal(err)
				}
			}
		}
	}

	for dir, ls := range c.Locations {
		for name, l := range ls {
			fmt.Printf("Generating %q...\n", name)
			dir := strings.TrimPrefix(dir, "testdata/did")
			dir = strings.TrimPrefix(dir, "/")
			dir = path.Join(dir, name)

			if _, err := os.Stat(dir); os.IsNotExist(err) {
				if err := os.MkdirAll(dir, os.ModePerm); err != nil {
					log.Fatal(err)
				}
			}

			g, err := gen.NewGenerator("", name, name, l.CandidRaw)
			if err != nil {
				log.Fatal(err)
			}
			if name == "ic0" {
				g.Indirect()
			}
			raw, err := g.Generate()
			if err != nil {
				log.Fatal(err)
			}

			if err := os.WriteFile(fmt.Sprintf("%s/agent.go", dir), raw, os.ModePerm); err != nil {
				log.Fatal(err)
			}
		}
	}
}

func title(s string) string {
	var title []rune
	for i, c := range s {
		if i == 0 {
			title = append(title, unicode.ToUpper(c))
		} else {
			title = append(title, c)
		}
	}
	return string(title)
}
